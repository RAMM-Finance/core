{
  "address": "0xF37BC409dA427d5878f9E3e5d5d76B4C2C095Da3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zcbFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "longZCB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "shortZCB",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "entry",
          "type": "address"
        }
      ],
      "name": "newPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "longZCB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "shortZCB",
          "type": "address"
        },
        {
          "internalType": "contract SyntheticZCBPool",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zcbFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x282b4d58fc19474bb25f5def7c450106a43f619653bf00002e39c01e48303458",
  "receipt": {
    "to": null,
    "from": "0x2C7Cb3cB22Ba9B322af60747017acb06deB10933",
    "contractAddress": "0xF37BC409dA427d5878f9E3e5d5d76B4C2C095Da3",
    "transactionIndex": 0,
    "gasUsed": "5302664",
    "logsBloom": "0x
    "blockHash": "0x31a86d10290c46a8cedd4503f2fead8496704ae41c44708c1653cb5a7f95316b",
    "transactionHash": "0x282b4d58fc19474bb25f5def7c450106a43f619653bf00002e39c01e48303458",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 31282708,
        "transactionHash": "0x282b4d58fc19474bb25f5def7c450106a43f619653bf00002e39c01e48303458",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002c7cb3cb22ba9b322af60747017acb06deb10933",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000075be27b32a2d4700000000000000000000000000000000000000000000000009deb035a8f2f8ed000000000000000000000000000000000000000000000190fbb26a62fdd6a33d8000000000000000000000000000000000000000000000000968f20df5c8cba6000000000000000000000000000000000000000000000190fc28288ab100d0848",
        "logIndex": 0,
        "blockHash": "0x31a86d10290c46a8cedd4503f2fead8496704ae41c44708c1653cb5a7f95316b"
      }
    ],
    "blockNumber": 31282708,
    "cumulativeGasUsed": "5302664",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd750Ef7Fb55f42422322eF4bd868523dF285eF12",
    "0xeD9D130fA9Aed1e6109C768394F56f34428A5A62"
  ],
  "numDeployments": 21,
  "solcInputHash": "8540ecc5b66e20938fda704bd173b64b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zcbFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"longZCB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shortZCB\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"entry\",\"type\":\"address\"}],\"name\":\"newPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"longZCB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shortZCB\",\"type\":\"address\"},{\"internalType\":\"contract SyntheticZCBPool\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zcbFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"newPool(address,address)\":{\"notice\":\"param base is the collateral used in pool \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bonds/synthetic.sol\":\"SyntheticZCBPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363734343233323434353539\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/bonds/GBC.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n// import {ERC20} from \\\"./aave/Libraries.sol\\\"; \\nimport {SafeCast, FixedPointMath, ERC20} from \\\"./libraries.sol\\\"; \\nimport \\\"lib/forge-std/src/console.sol\\\";\\n\\n/// @notice AMM for a token pair (trade, base), only tracks price denominated in trade/base  \\n/// and point-bound(limit order) and range-bound(multiple points, also known as concentrated) liquidity \\n/// @dev all funds will be handled in the child contract \\ncontract GranularBondingCurve{\\n    using FixedPointMath for uint256;\\n    using Tick for mapping(uint16 => Tick.Info);\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n    using SafeCast for uint256; \\n\\n\\n    modifier onlyEntry(){\\n        require(entry == msg.sender  ,\\\"Not Entry\\\"); \\n        _;\\n    }\\n    \\n    bool private _mutex;\\n    modifier _lock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    constructor(\\n        address _baseToken,\\n        address _tradeToken\\n        //uint256 _priceDelta\\n        ) {\\n        tradeToken = _tradeToken; \\n        baseToken = _baseToken; \\n        //priceDelta = _priceDelta; \\n        fee =0; \\n        factory = address(0); \\n        tickSpacing = 0; \\n        //Start liquidity \\n        liquidity = 100 * uint128(PRECISION); \\n\\n        owner = msg.sender; \\n    }\\n\\n    address public immutable owner; \\n    uint24 public immutable  fee;\\n    Slot0 public slot0; // global state?\\n    address public immutable  factory;\\n    address public immutable  tradeToken;\\n    address public immutable  baseToken;\\n    int24 public immutable  tickSpacing; // only ticks/price points divisible by tickSpacing can be initialized.\\n\\n    uint128 public liquidity;\\n\\n    mapping(uint16 => Tick.Info) public  ticks;\\n\\n    mapping(bytes32 => Position.Info) public  positions;\\n\\n    // mapping(uint16=> PricePoint) Points; \\n\\n    uint256 public  constant priceDelta = 1e16; //difference in price for two adjacent ticks => 0.01 base token.\\n    uint256 public constant ROUNDLIMIT = 1e4; \\n    uint256 public constant PRECISION = 1e18; \\n    address public entry; \\n\\n    /// @notice previliged function called by the market maker \\n    /// if he is the one providing all the liquidity \\n    function setLiquidity(uint128 liq) internal  \\n    //onlyEntry\\n    {\\n        liquidity = liq; \\n    }\\n\\n    function setEntry(address _entry) external onlyEntry{\\n        entry = _entry; \\n    }\\n    function lock() external onlyEntry{\\n        slot0.unlocked = !slot0.unlocked; \\n    }\\n\\n    function positionIsFilled(\\n        address recipient, \\n        uint16 point, \\n        bool isAsk\\n    ) \\n        public view returns(bool){\\n        Position.Info storage position = positions.get(recipient, point, point+1);\\n\\n        uint128 numCross = ticks.getNumCross(point, isAsk); \\n        uint128 crossId = isAsk? position.askCrossId : position.bidCrossId; \\n        uint128 liq = isAsk? position.askLiq : position.bidLiq;\\n\\n        return (liq>0 && numCross > crossId); \\n    }\\n\\n    function setPriceAndPoint(uint256 price) internal  \\n    //onlyOwner\\n    {\\n        slot0.point = priceToPoint(price);         \\n        slot0.curPrice = price.toUint160(); \\n    }\\n\\n    function getCurPrice() external view returns(uint256){\\n        return slot0.curPrice; \\n    }\\n\\n    function getOneTimeLiquidity(uint16 point, bool moveUp) external view returns(uint256){\\n        return uint256(ticks.oneTimeLiquidity(point)); \\n    }    \\n\\n    function getNumCross(uint16 point, bool moveUp) external view returns(uint256){\\n        return ticks.getNumCross(point, moveUp); \\n    }\\n\\n\\n    struct Slot0 {\\n        // the current price\\n        uint160 curPrice;\\n        // the current tick\\n        uint16 point;\\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\\n        // represented as an integer denominator (1/x)%\\n        uint8 feeProtocol;\\n        // whether the pool is locked\\n        bool unlocked;\\n\\n        // Whether liquidity provision is amortized \\n        bool amortized; \\n\\n        // Where to modify liquidity \\n        uint16 modifyLiqPoint; \\n    }\\n\\n    // the top level state of the swap, the results of which are recorded in storage at the end\\n    struct SwapState {\\n        // the amount remaining to be swapped in/out of the input/output asset\\n        int256 amountSpecifiedRemaining;\\n        // the amount already swapped out/in of the output/input asset\\n        uint256 amountCalculated;\\n        // current sqrt(price)\\n        uint256 curPrice;\\n        // the tick associated with the current price\\n        uint16 point;\\n        // the global fee growth of the input token\\n        uint256 feeGrowthGlobal;\\n        // amount of input token paid as protocol fee\\n        uint128 protocolFee;\\n        // the current liquidity in range\\n        uint128 liquidity;\\n        uint128 liquidityStart; \\n\\n\\n    }\\n\\n    struct StepComputations {\\n        // the price at the beginning of the step\\n        uint256 priceStart;\\n        // the next tick to swap to from the current tick in the swap direction\\n        uint16 pointNext;\\n        // whether tickNext is initialized or not\\n        bool initialized;\\n        // price for the next tick (1/0)\\n        uint256 priceNextLimit;\\n        // how much is being swapped in in this step\\n        uint256 amountIn;\\n        // how much is being swapped out\\n        uint256 amountOut;\\n        // how much fee is being paid in\\n        uint256 feeAmount;\\n\\n        uint128 liqDir; \\n    }\\n\\n    struct swapVars{\\n        uint256 a;\\n        uint256 s; \\n        uint256 b; \\n    }\\n\\n    /// param +amountSpecified is in base if moveUp, else is in trade (+ if input asset, - if output asset)\\n    /// -amountSpecified is in trade if moveUp, else is in base \\n    /// returns amountIn if moveUp, cash, else token\\n    /// returns amountOut if moveUp, token, else cash \\n    function trade(\\n        address recipient, \\n        bool moveUp, \\n        int256 amountSpecified, \\n        uint256 priceLimit, \\n        bytes calldata data\\n        ) public onlyEntry _lock_ returns(uint256 amountIn, uint256 amountOut){\\n        console.logString('---New Trade---'); \\n\\n        Slot0 memory slot0Start = slot0; \\n        uint256 pDelta = priceDelta; \\n\\n        SwapState memory state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified, \\n            amountCalculated: 0, \\n            curPrice: uint256(slot0Start.curPrice),\\n            feeGrowthGlobal: moveUp? feeGrowthGlobalBase: feeGrowthGlobalTrade,//moveup is base in for trade out\\n            protocolFee: 0, \\n            liquidity: liquidity, \\n            liquidityStart: liquidity,\\n            point: slot0.point\\n            }); \\n        swapVars memory vars = swapVars({\\n            a:0,\\n            b:0,\\n            s:0\\n            });\\n\\n        bool exactInput = amountSpecified > 0;\\n\\n        // increment price by 1/1e18 if at boundary, and go back up a point,\\n        // should be negligible compared to fees TODO \\n        if (mod0(state.curPrice, pDelta) && !moveUp) {\\n            state.curPrice += 1; \\n            state.point = priceToPoint(state.curPrice);\\n            slot0.point = state.point; \\n            slot0Start.point = state.point; \\n        }\\n        \\n        require(moveUp? priceLimit>= state.curPrice : priceLimit<= state.curPrice, \\\"plimitERR\\\" ); \\n        priceLimit = pointToPrice(priceToPoint(priceLimit)); \\n\\n        while (state.amountSpecifiedRemaining !=0 && state.curPrice != priceLimit){\\n            StepComputations memory step; \\n            step.priceStart = state.curPrice; \\n            step.priceNextLimit = getNextPriceLimit(state.point, pDelta, moveUp); \\n\\n            step.pointNext = moveUp? state.point + 1 : state.point-1; \\n\\n            // Need liquidity for both move up and move down for path independence within a \\n            // given point range. Either one of them should be 0 \\n            step.liqDir = ticks.oneTimeLiquidity(state.point);\\n            vars.a = exactInput \\n                ? inv(state.liquidity + step.liqDir)\\n                : invRoundUp(state.liquidity + step.liqDir); \\n            vars.b = yInt(state.curPrice, moveUp); \\n            vars.s = xMax(state.curPrice, vars.b, vars.a); \\n \\n            //If moveup, amountIn is in cash, amountOut is token and vice versa \\n            (state.curPrice, step.amountIn, step.amountOut, step.feeAmount) = LinearCurve.swapStep(\\n                state.curPrice, \\n                step.priceNextLimit,    \\n                state.amountSpecifiedRemaining, \\n                fee, \\n                vars               \\n                ); \\n\\n            {console.log('________'); \\n            console.log('CURPRICE', state.curPrice); \\n            console.log('trading; liquidity, amountleft', state.liquidity); \\n            console.log(uint256(state.amountSpecifiedRemaining));\\n            console.log('nextpricelimit/pointnext', step.priceNextLimit, step.pointNext);           \\n            console.log('a', vars.a); }\\n            console.log('amountinandout', step.amountIn, step.amountOut); \\n            console.log('s,b', vars.s, vars.b); \\n\\n            if (exactInput){\\n                state.amountSpecifiedRemaining -= int256(step.amountIn); \\n            }\\n            else{\\n                state.amountSpecifiedRemaining += int256(step.amountIn); \\n            }\\n            state.amountCalculated += step.amountOut; \\n\\n            if (state.liquidity>0)\\n                state.feeGrowthGlobal += step.feeAmount.divWadDown(uint256(state.liquidity)); \\n\\n            // If next limit reached, cross price range and change slope(liquidity)\\n            if (state.curPrice == step.priceNextLimit){\\n\\n                // If crossing UP, asks are all filled so need to set askLiquidity to 0 and increment numCross\\n                // Else if crossing DOWN, bids are all filled \\n                if (step.liqDir!=0) ticks.deleteOneTimeLiquidity(state.point, moveUp); \\n\\n                int128 liquidityNet = ticks.cross(\\n                    step.pointNext, \\n                    feeGrowthGlobalBase,\\n                    feeGrowthGlobalTrade\\n                    ); \\n\\n                if (!slot0Start.amortized && step.pointNext == slot0Start.modifyLiqPoint)\\n                    liquidityNet = liquidityNet += dynamicLiq[step.pointNext]; \\n                    console.log('dynamicLiq', uint256(int256(dynamicLiq[step.pointNext])), uint256(int256(liquidityNet))); \\n\\n                if (!moveUp) liquidityNet = -liquidityNet; \\n\\n\\n                state.liquidity = addDelta(state.liquidity,liquidityNet);\\n                state.point = step.pointNext;  \\n            }\\n        }\\n\\n        slot0.curPrice = state.curPrice.toUint160(); \\n        if(state.point != slot0Start.point) slot0.point = state.point; \\n            \\n        if (state.liquidityStart != state.liquidity) liquidity = state.liquidity;\\n\\n        if (moveUp) feeGrowthGlobalBase = state.feeGrowthGlobal; \\n            \\n        // (amountIn, amountOut) = exactInput\\n        //                         ? moveUp ? (uint256(amountSpecified-state.amountSpecifiedRemaining ) + ROUNDLIMIT, state.amountCalculated)//TODO roundfixes\\n        //                                  : (uint256(amountSpecified-state.amountSpecifiedRemaining ), state.amountCalculated)\\n        //                         : (state.amountCalculated + ROUNDLIMIT, uint256(-amountSpecified+state.amountSpecifiedRemaining )); \\n\\n        (amountIn, amountOut) = exactInput\\n                                ? moveUp ? (uint256(amountSpecified-state.amountSpecifiedRemaining ) , state.amountCalculated)//TODO roundfixes\\n                                         : (uint256(amountSpecified-state.amountSpecifiedRemaining ), state.amountCalculated)\\n                                : (state.amountCalculated + ROUNDLIMIT, uint256(-amountSpecified+state.amountSpecifiedRemaining )); \\n                    console.log('???', uint256(state.amountSpecifiedRemaining) , uint256(amountSpecified)); \\n\\n    }\\n\\n    function placeLimitOrder(\\n        address recipient, \\n        uint16 point, \\n        uint128 amount,\\n        bool isAsk  \\n        ) public onlyEntry _lock_ returns(uint256 amountToEscrow, uint128 numCross ){   \\n        //TODO mint NFT \\n        // Should only accept asks for price above the current point range\\n        if(isAsk && pointToPrice(point) <= slot0.curPrice) revert(\\\"ask below prie\\\"); \\n        else if(!isAsk && pointToPrice(point) >= slot0.curPrice) revert(\\\"bids above prie\\\"); \\n\\n        Position.Info storage position = positions.get(recipient, point, point+1);\\n\\n        numCross = ticks.getNumCross(point, isAsk); \\n        position.updateLimit(int128(amount), isAsk, numCross); \\n\\n        ticks.updateOneTimeLiquidity( point, int128(amount), isAsk); \\n\\n        // If placing bids, need to escrow baseAsset, vice versa \\n        address tokenToEscrow = isAsk? tradeToken : baseToken;\\n\\n        amountToEscrow = isAsk\\n                ? tradeGivenLiquidity(\\n                    pointToPrice(point+1), \\n                    pointToPrice(point), \\n                    uint256(amount) \\n                    )\\n            \\n                : baseGivenLiquidity(\\n                    pointToPrice(point+1), \\n                    pointToPrice(point), \\n                    uint256(amount) \\n                    ); \\n\\n        console.log('amountbid', amountToEscrow); \\n\\n    }\\n\\n    function reduceLimitOrder(\\n        address recipient, \\n        uint16 point, \\n        uint128 amount,\\n        bool isAsk \\n        ) public onlyEntry _lock_  returns(uint256 amountToReturn) {\\n        require(priceToPoint(uint256(slot0.curPrice)) != point, \\\"Can't reduce order for current tick\\\"); \\n\\n        Position.Info storage position = positions.get(msg.sender, point, point+1);\\n\\n        position.updateLimit(-int128(amount), isAsk, 0); \\n\\n        ticks.updateOneTimeLiquidity(point, -int128(amount), isAsk); \\n\\n        address tokenToReturn = isAsk? tradeToken : baseToken;\\n        \\n        amountToReturn = isAsk\\n            ? tradeGivenLiquidity(\\n                pointToPrice(point+1), \\n                pointToPrice(point), \\n                uint256(amount) \\n                )\\n         \\n            : baseGivenLiquidity(\\n                pointToPrice(point+1), \\n                pointToPrice(point), \\n                uint256(amount) \\n                );\\n    }\\n\\n    /// @notice called when maker wants to claim when the the price is at the \\n    /// point he submitted the order\\n    function claimPartiallyFilledOrder(\\n        address recipient, \\n        uint16 point,\\n        bool isAsk\\n        ) public onlyEntry _lock_ returns(uint256 baseAmount, uint256 tradeAmount){\\n        Slot0 memory _slot0 = slot0; \\n\\n        Position.Info storage position = positions.get(recipient, point, point+1);\\n        require(priceToPoint(uint256(_slot0.curPrice)) == point, \\\"Not cur price\\\"); \\n\\n        // Assume trying to withdraw all liquidity provided \\n        uint128 liqToWithdraw = isAsk ? position.askLiq : position.bidLiq; \\n       \\n        position.updateLimit(-int128(liqToWithdraw), isAsk, 0); \\n\\n        ticks.updateOneTimeLiquidity(point, -int128(liqToWithdraw), isAsk); \\n\\n        // Get total trade filled OR remaining\\n        tradeAmount = tradeGivenLiquidity(\\n            pointToPrice(point+1),\\n            _slot0.curPrice, \\n            liqToWithdraw\\n        ); \\n           \\n        // Get total base filled OR remaining \\n        baseAmount = baseGivenLiquidity(\\n            _slot0.curPrice, \\n            pointToPrice(point), \\n            liqToWithdraw\\n            ); \\n\\n    }\\n\\n    /// @notice Need to check if the ask/bids were actually filled, which is equivalent to\\n    /// the condition that numCross > crossId, because numCross only increases when crossUp \\n    /// or crossDown \\n    function claimFilledOrder(\\n        address recipient, \\n        uint16 point, \\n        bool isAsk \\n        ) public onlyEntry _lock_  returns(uint256 claimedAmount){\\n        Position.Info storage position = positions.get(recipient, point, point+1);\\n\\n        uint128 numCross = ticks.getNumCross(point, isAsk); \\n        uint128 crossId = isAsk? position.askCrossId : position.bidCrossId; \\n        require(numCross > crossId, \\\"Position not filled\\\");\\n\\n        uint128 liq = isAsk? position.askLiq : position.bidLiq;\\n\\n        // Sold to base when asks are filled\\n        if(isAsk) claimedAmount = baseGivenLiquidity(\\n                pointToPrice(point+1), \\n                pointToPrice(point), \\n                uint256(liq) \\n                ); \\n\\n        // Bought when bids are filled so want tradeTokens\\n        else claimedAmount = tradeGivenLiquidity(\\n                pointToPrice(point+1), \\n                pointToPrice(point), \\n                uint256(liq) \\n                ); \\n\\n        position.updateLimit(-int128(liq), isAsk, 0); \\n        \\n        // Need to burn AND \\n\\n    }\\n\\n    struct ModifyPositionParams {\\n        // the address that owns the position\\n        address owner;\\n        // the lower and upper tick of the position\\n        uint16 pointLower;\\n        uint16 pointUpper;\\n        // any change in liquidity\\n        int128 liquidityDelta;\\n    }\\n\\n    /// @notice provides liquidity in range or adds limit order if pointUpper = pointLower + 1\\n    function provide(\\n        address recipient, \\n        uint16 pointLower, \\n        uint16 pointUpper, \\n        uint128 amount, \\n        bytes calldata data \\n        ) public onlyEntry _lock_ returns(uint256 amount0, uint256 amount1 ){\\n        require(amount > 0, \\\"0 amount\\\"); \\n\\n        (,  amount0,  amount1) = _modifyPosition(\\n            ModifyPositionParams({\\n                owner: recipient, \\n                pointLower : pointLower, \\n                pointUpper: pointUpper, \\n                liquidityDelta: int128(amount)//.toInt128()\\n                })\\n            ); \\n\\n        //mintCallback\\n\\n    }\\n\\n    function remove(\\n        address recipient, \\n        uint16 pointLower, \\n        uint16 pointUpper, \\n        uint128 amount\\n        ) public onlyEntry _lock_ returns(uint256 , uint256 ){\\n\\n        (Position.Info storage position,  uint256 amount0, uint256 amount1) = _modifyPosition(\\n            ModifyPositionParams({\\n                owner: recipient, \\n                pointLower : pointLower, \\n                pointUpper: pointUpper, \\n                liquidityDelta: -int128(amount)//.toInt128()\\n                })\\n            ); \\n\\n        if(amount0>0 || amount1> 0){\\n            (position.tokensOwed0, position.tokensOwed1) = (\\n                position.tokensOwed0 + amount0,\\n                position.tokensOwed1 + amount1\\n            );\\n        }\\n        return (amount0, amount1); \\n    }\\n\\n    function collect(\\n        address recipient,\\n        uint16 tickLower,\\n        uint16 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) public onlyEntry _lock_  returns (uint256 amount0, uint256 amount1) {\\n        // we don't need to checkTicks here, because invalid positions will never have non-zero tokensOwed{0,1}\\n        Position.Info storage position = positions.get(msg.sender, tickLower, tickUpper);\\n\\n        amount0 = amount0Requested > position.tokensOwed0 ? position.tokensOwed0 : amount0Requested;\\n        amount1 = amount1Requested > position.tokensOwed1 ? position.tokensOwed1 : amount1Requested;\\n\\n        if (amount0 > 0) {\\n            position.tokensOwed0 -= amount0;\\n        }\\n        if (amount1 > 0) {\\n            position.tokensOwed1 -= amount1;\\n        }\\n    }\\n\\n\\n    function _modifyPosition(ModifyPositionParams memory params)\\n    private \\n    returns(\\n        Position.Info storage position, \\n        uint256 baseAmount, \\n        uint256 tradeAmount\\n        )\\n    {\\n        Slot0 memory _slot0 = slot0; // SLOAD for gas optimization\\n\\n        position = _updatePosition(\\n            params.owner,\\n            params.pointLower,\\n            params.pointUpper,\\n            params.liquidityDelta,\\n            _slot0.point\\n        );\\n\\n        if (params.liquidityDelta != 0){\\n            if (_slot0.point < params.pointLower){\\n                // in case where liquidity is just asks waiting to be sold into, \\n                // so need to only provide tradeAsset \\n                tradeAmount = tradeGivenLiquidity(\\n                    pointToPrice(params.pointUpper), \\n                    pointToPrice(params.pointLower), \\n                    params.liquidityDelta >= 0\\n                        ? uint256(int256(params.liquidityDelta))\\n                        : uint256(int256(-params.liquidityDelta))\\n                    ); \\n            } else if( _slot0.point < params.pointUpper){\\n                uint128 liquidityBefore = liquidity; \\n\\n                // Get total asks to be submitted above current price\\n                tradeAmount = tradeGivenLiquidity(\\n                    pointToPrice(params.pointUpper),\\n                    _slot0.curPrice, \\n                    params.liquidityDelta >= 0\\n                        ? uint256(int256(params.liquidityDelta))\\n                        : uint256(int256(-params.liquidityDelta))\\n                    ); \\n\\n                // Get total bids to be submitted below current price \\n                baseAmount = baseGivenLiquidity(\\n                    _slot0.curPrice, \\n                    pointToPrice(params.pointLower), \\n                    params.liquidityDelta >= 0\\n                        ? uint256(int256(params.liquidityDelta))\\n                        : uint256(int256(-params.liquidityDelta))\\n                    ); \\n\\n                // Slope changes since current price is in this range \\n                liquidity = addDelta(liquidityBefore, params.liquidityDelta);\\n\\n            } else{\\n                // liquidity is just bids waiting to be bought into \\n                baseAmount = baseGivenLiquidity(\\n                    pointToPrice(params.pointUpper), \\n                    pointToPrice(params.pointLower), \\n                    params.liquidityDelta >= 0\\n                        ? uint256(int256(params.liquidityDelta))\\n                        : uint256(int256(-params.liquidityDelta))\\n                ); \\n            }\\n        }\\n    }\\n\\n    uint256 public feeGrowthGlobalBase;\\n    uint256 public feeGrowthGlobalTrade;\\n\\n    function _updatePosition(\\n        address owner, \\n        uint16 pointLower, \\n        uint16 pointUpper, \\n        int128 liquidityDelta, \\n        uint16 point \\n        ) private returns(Position.Info storage position){\\n\\n        position = positions.get(owner, pointLower, pointUpper); \\n\\n        uint256 _feeGrowthGlobalBase = feeGrowthGlobalBase; \\n        uint256 _feeGrowthGlobalTrade = feeGrowthGlobalTrade; \\n\\n        if(liquidityDelta != 0){\\n\\n            ticks.update(\\n                pointLower, \\n                point, \\n                liquidityDelta, \\n                feeGrowthGlobalBase,\\n                feeGrowthGlobalTrade,\\n                false\\n                ); \\n\\n            ticks.update(\\n                pointUpper, \\n                point, \\n                liquidityDelta, \\n                feeGrowthGlobalBase,\\n                feeGrowthGlobalTrade,\\n                true\\n                ); \\n        } \\n        (uint256 feeGrowthInsideBase, uint256 feeGrowthInsideTrade) =\\n            ticks.getFeeGrowthInside(pointLower, pointUpper, point, _feeGrowthGlobalBase, _feeGrowthGlobalTrade);\\n        position.update(liquidityDelta, feeGrowthInsideBase,feeGrowthInsideTrade); \\n    }\\n\\n\\n    mapping(uint16=> int128) dynamicLiq; \\n    function setDynamicLiquidity(uint16 point, int128 liq) internal {\\n        dynamicLiq[point] = liq; \\n    }\\n    function setModifyLiqPoint(uint16 point) internal{\\n        slot0.modifyLiqPoint = point;  \\n    }\\n    function amortizeLiq() internal{\\n        slot0.amortized = true; \\n    }\\n\\n    function tradeGivenLiquidity(uint256 p2, uint256 p1, uint256 L) public pure returns(uint256){\\n        require(p2>=p1, \\\"price ERR\\\"); \\n        return (p2-p1).mulWadDown(L); \\n    }\\n\\n    function baseGivenLiquidity(uint256 p2, uint256 p1, uint256 L) public pure returns(uint256) {\\n        require(p2>=p1, \\\"price ERR\\\"); \\n        return LinearCurve.areaUnderCurve(tradeGivenLiquidity(p2, p1, L), 0, inv(L), p1); \\n    }\\n\\n    function liquidityGivenTrade(uint256 p2, uint256 p1, uint256 T) public pure returns(uint256){\\n        require(p2>=p1, \\\"price ERR\\\"); \\n        return T.divWadDown(p2-p1); \\n    }\\n    function liquidityGivenBase(uint256 p2, uint256 p1, uint256 B) public pure returns(uint256){\\n        require(p2>=p1, \\\"price ERR\\\"); \\n        return B.divWadDown((p2-p1).mulWadDown((p2+p1)/2)); \\n    }\\n\\n    function pointToPrice(uint16 point) public pure returns(uint160){\\n        return(uint256(point) * priceDelta).toUint160(); \\n    }\\n\\n    /// @notice will round down to nearest integer \\n    function priceToPoint(uint256 price) public pure returns(uint16){\\n        return uint16((price.divWadDown(priceDelta))/PRECISION); \\n    }\\n\\n    function xMax(uint256 curPrice, uint256 b, uint256 a) public pure returns(uint256){\\n        if(a==0) return type(uint256).max; \\n        return (curPrice-b).divWadDown(a); \\n    }\\n    function xMaxRoundUp(uint256 curPrice, uint256 b, uint256 a) public pure returns(uint256){\\n        return (curPrice-b).divWadUp(a); \\n    }\\n\\n    /// @notice get the lower bound of the given price range, or the y intercept of the curve of\\n    /// the current point\\n    function yInt(uint256 curPrice, bool moveUp) public pure returns(uint256){\\n        uint16 point = priceToPoint(curPrice); \\n\\n        // If at boundary when moving down, decrement point by one\\n        return (!moveUp && (curPrice%point == 0))? pointToPrice(point-1) : pointToPrice(point); \\n    }\\n\\n    function getNextPriceLimit(uint16 point, uint256 pDelta, bool moveUp) public pure returns(uint256){\\n        if (moveUp) return uint256(point+1) * pDelta; \\n        else return uint256(point) * pDelta; \\n    }\\n\\n    function inv(uint256 l) internal pure returns(uint256){\\n        return l==0? PRECISION.divWadDown(l+1) : PRECISION.divWadDown(l) ; \\n    }\\n    function invRoundUp(uint256 l) internal pure returns(uint256){\\n        return l==0? PRECISION.divWadUp(l+1) : PRECISION.divWadUp(l) ; \\n    }\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n    function mod0(uint256 a, uint256 b) internal pure returns(bool){\\n        return (a%b ==0); \\n    }\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) public pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n    function getLiq(address to, uint16 point, bool isAsk) public view returns(uint128){\\n        return  isAsk\\n                ? positions.get(to, point, point+1).askLiq\\n                : positions.get(to, point, point+1).bidLiq; \\n    }\\n\\n}\\n\\nlibrary LinearCurve{\\n    uint256 public constant PRECISION = 1e18; \\n    using FixedPointMath for uint256; \\n\\n\\n    /// @notice Compute results of swap given amount in and params\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// b is 0 and s is curPrice/a during variable liquidity phase\\n    function swapStep(\\n        uint256 curPrice, \\n        uint256 targetPrice, \\n        int256 amountRemaining, \\n        uint24 feePips,    \\n        GranularBondingCurve.swapVars memory vars       \\n        ) \\n        public \\n        pure \\n        returns(uint256 nextPrice, uint256 amountIn, uint256 amountOut, uint256 feeAmount ){\\n\\n        bool moveUp = targetPrice >= curPrice; \\n        bool exactInput = amountRemaining >= 0; \\n\\n        // If move up and exactInput, amountIn is base, amountOut is trade \\n        if (exactInput){\\n            // uint256 amountRemainingLessFee = uint256(amountRemaining).mulDivDown(1e6-feePips, 1e6);\\n\\n            if (moveUp){\\n                (amountOut, nextPrice) = amountOutGivenIn(uint256(amountRemaining),vars.s,vars.a,vars.b, true); \\n\\n                // If overshoot go to next point\\n                if (nextPrice >= targetPrice){\\n                    nextPrice = targetPrice; \\n\\n                    // max amount out for a given price range is Pdelta / a \\n                    amountOut = (targetPrice - curPrice).divWadDown(vars.a); \\n                    amountIn = areaUnderCurve(amountOut, vars.s,vars.a,vars.b).mulDivDown(1e6+feePips, 1e6); \\n                }            \\n                else {\\n                    amountIn = uint256(amountRemaining).mulDivDown(1e6+feePips, 1e6); \\n                }   \\n            }\\n\\n            // amountIn is trade, amountOut is base \\n            else {\\n                // If amount is greater than s, then need to cap it \\n                (amountOut, nextPrice) = amountOutGivenIn(min(uint256(amountRemaining),vars.s), vars.s,vars.a,vars.b,false); \\n                // If undershoot go to previous point \\n                if(nextPrice <= targetPrice && vars.a > 0){//TODO might introduce bugs \\n                    nextPrice = targetPrice; \\n\\n                    // max amount out is area under curve \\n                    amountIn = (curPrice - targetPrice).divWadDown(vars.a);\\n                    amountOut = areaUnderCurve(amountIn, 0,vars.a,vars.b); \\n                    amountIn = amountIn.mulDivDown(1e6+feePips, 1e6); \\n\\n                }\\n                else{\\n                    amountIn = uint256(amountRemaining).mulDivDown(1e6+feePips, 1e6); \\n                }\\n            }\\n            feeAmount = amountIn.mulDivDown(uint256(feePips).mulDivDown(1e6,1e6+feePips), 1e6); \\n        }\\n\\n        else {\\n            if(moveUp){\\n                uint256 remaining = uint256(-amountRemaining); \\n                nextPrice = vars.a.mulWadUp(remaining) + curPrice; \\n\\n                // if overshoot\\n                if(nextPrice>=targetPrice){\\n                    amountIn = xMax(targetPrice, curPrice,  vars.a); \\n                    nextPrice = targetPrice; \\n\\n                    // Prevent stuck cases where point is almost filled but not quite \\n                    if(remaining - amountIn<=1e4){\\n                        amountIn = remaining; \\n                    } \\n                }\\n                else amountIn = remaining; \\n\\n                amountOut = areaUnderCurveRoundUp(amountIn, 0, vars.a, curPrice); //you want this to be more, so round up\\n\\n            }\\n            else{\\n                //TODO \\n            }\\n            feeAmount = amountOut.mulDivDown(feePips, 1e6);\\n            amountOut = amountOut + feeAmount;\\n        }\\n    }\\n\\n\\n    /// @dev tokens returned = [((a*s + b)^2 + 2*a*p)^(1/2) - (a*s + b)] / a\\n    /// @param amount: amount of base in\\n    /// returns amountDelta wanted token returned \\n    function amountOutGivenIn( \\n        uint256 amount,\\n        uint256 s, \\n        uint256 a, \\n        uint256 b, \\n        bool up\\n        ) \\n        public \\n        pure \\n        returns(uint256 amountDelta, uint256 resultPrice) {\\n        \\n        // If liquidity is not infinite \\n        if(a > 0){\\n            if (up){\\n                //TODO overflow on small amount \\n                uint256 x = ((a.mulWadDown(s) + b) ** 2)/PRECISION; \\n                uint256 y = 2*( a.mulWadDown(amount)); \\n                uint256 x_y_sqrt = ((x+y)*PRECISION).sqrt();\\n                uint256 z = (a.mulWadDown(s) + b); \\n                amountDelta = (x_y_sqrt-z).divWadDown(a);\\n                resultPrice = a.mulWadDown(amountDelta + s) + b; \\n            } else{\\n                uint256 z = b + a.mulWadDown(s) - a.mulWadDown(amount)/2;  \\n                amountDelta = amount.mulWadDown(z); \\n                resultPrice = a.mulWadDown(s-amount) + b; \\n            }\\n        }\\n\\n        // When a = 0, infinite liquidity and constant price\\n        else{     \\n            if(up){\\n                amountDelta = amount.divWadDown(b); \\n            } else{\\n                amountDelta = amount.mulWadDown(b); \\n            }\\n            resultPrice = b;             \\n        }\\n    }\\n\\n    /// @notice calculates area under the curve from s to s+amount\\n     /// result = a * amount / 2  * (2* supply + amount) + b * amount\\n     /// returned in collateral decimals\\n    function areaUnderCurve(\\n        uint256 amount, \\n        uint256 s, \\n        uint256 a, \\n        uint256 b) \\n        public\\n        pure \\n        returns(uint256 area){\\n        area = ( a.mulWadDown(amount) / 2 ).mulWadDown(2 * s + amount) + b.mulWadDown(amount); \\n    }\\n    function areaUnderCurveRoundUp(\\n        uint256 amount, \\n        uint256 s, \\n        uint256 a, \\n        uint256 b) \\n        public\\n        pure \\n        returns(uint256 area){\\n        // you want area to be big for a given amount \\n        area = ( a.mulWadUp(amount) / 2 ).mulWadUp(2 * s + amount) + b.mulWadUp(amount); \\n    }\\n\\n    function min(uint256 a, uint256 b) public pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function xMax(uint256 curPrice, uint256 b, uint256 a) public pure returns(uint256){\\n        if(a==0) return type(uint256).max; \\n        return (curPrice-b).divWadDown(a); \\n    }\\n\\n}\\n\\n/// @title Position\\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\\n/// @dev Positions store additional state for tracking fees owed to the position\\nlibrary Position {\\n    using FixedPointMath for uint256;\\n\\n    // info stored for each user's position\\n    struct Info {\\n        uint128 bidCrossId; \\n        uint128 askCrossId; \\n        uint128 askLiq; \\n        uint128 bidLiq; \\n\\n        // the amount of liquidity owned by this position\\n        uint128 liquidity;\\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\\n        uint256 feeGrowthInside0LastX128;\\n        uint256 feeGrowthInside1LastX128;\\n        // the fees owed to the position owner in token0/token1\\n        uint256 tokensOwed0;\\n        uint256 tokensOwed1;\\n\\n        \\n    }\\n\\n    function updateLimit(\\n        Info storage self,\\n        int128 limitLiqudityDelta, \\n        bool isAsk, \\n        uint128 crossId\\n        ) internal {\\n\\n        if (isAsk) {\\n            self.askLiq = addDelta(self.askLiq, limitLiqudityDelta);\\n            if( limitLiqudityDelta > 0) self.askCrossId = crossId; \\n        } \\n\\n        else {\\n            self.bidLiq = addDelta(self.bidLiq, limitLiqudityDelta); \\n            if( limitLiqudityDelta > 0) self.bidCrossId = crossId; \\n        }\\n    }\\n\\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\\n    /// @param self The mapping containing all user positions\\n    /// @param owner The address of the position owner\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @return position The position info struct of the given owners' position\\n    function get(\\n        mapping(bytes32 => Info) storage self,\\n        address owner,\\n        uint16 tickLower,\\n        uint16 tickUpper\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\\n    }\\n\\n    /// @notice Credits accumulated fees to a user's position\\n    /// @param self The individual position to update\\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\\n    /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\\n    /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\\n    function update(\\n        Info storage self,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthInside0X128,\\n        uint256 feeGrowthInside1X128\\n    ) internal {\\n        Info memory _self = self;\\n\\n        uint128 liquidityNext;\\n        if (liquidityDelta == 0) {\\n            require(_self.liquidity > 0, 'NP'); // disallow pokes for 0 liquidity positions\\n            liquidityNext = _self.liquidity;\\n        } else {\\n            liquidityNext = addDelta(_self.liquidity, liquidityDelta);\\n        }\\n\\n        // calculate accumulated fees\\n        uint128 tokensOwed0 = uint128(\\n                (feeGrowthInside0X128-_self.feeGrowthInside0LastX128)\\n                .mulDivDown(uint256(_self.liquidity), 1e18)\\n            );\\n        uint128 tokensOwed1 =uint128(\\n                (feeGrowthInside1X128-_self.feeGrowthInside1LastX128)\\n                .mulDivDown(uint256(_self.liquidity), 1e18)\\n            );\\n            \\n        // update the position\\n        if (liquidityDelta != 0) self.liquidity = liquidityNext;\\n        self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\\n        self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\\n        if (tokensOwed0 > 0 || tokensOwed1 > 0) {\\n            // overflow is acceptable, have to withdraw before you hit type(uint128).max fees\\n            self.tokensOwed0 += tokensOwed0;\\n            self.tokensOwed1 += tokensOwed1;\\n        }\\n    }\\n\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\\n/// @title Tick\\n/// @notice Contains functions for managing tick processes and relevant calculations\\nlibrary Tick {\\n    using FixedPointMath for uint256;\\n\\n    using SafeCast for int256;\\n\\n    // info stored for each initialized individual tick\\n    struct Info {\\n        // the total position liquidity that references this tick\\n        uint128 liquidityGross;\\n        // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\\n        int128 liquidityNet;\\n        // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        // only has relative meaning, not absolute \\u2014 the value depends on when the tick is initialized\\n        uint256 feeGrowthOutsideBase;\\n        uint256 feeGrowthOutsideTrade;\\n        // the cumulative tick value on the other side of the tick\\n        int56 tickCumulativeOutside;\\n        // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        // only has relative meaning, not absolute \\u2014 the value depends on when the tick is initialized\\n        uint160 secondsPerLiquidityOutsideX128;\\n        // the seconds spent on the other side of the tick (relative to the current tick)\\n        // only has relative meaning, not absolute \\u2014 the value depends on when the tick is initialized\\n        uint32 secondsOutside;\\n        // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\\n        // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\\n        bool initialized;\\n\\n        uint128 askLiquidityGross; \\n        uint128 bidLiquidityGross;\\n        uint128 askNumCross; \\n        uint128 bidNumCross; \\n    }\\n\\n    function getNumCross(\\n        mapping(uint16=> Tick.Info) storage self, \\n        uint16 tick, \\n        bool isAsk\\n        ) internal view returns(uint128){\\n        return isAsk? self[tick].askNumCross : self[tick].bidNumCross; \\n    }\\n\\n    function oneTimeLiquidity(\\n        mapping(uint16=> Tick.Info) storage self, \\n        uint16 tick \\n        ) internal view returns(uint128){\\n        Tick.Info memory info = self[tick]; \\n        assert(info.askLiquidityGross==0 || info.bidLiquidityGross==0); \\n        return info.askLiquidityGross + info.bidLiquidityGross; \\n    }\\n\\n    function deleteOneTimeLiquidity(\\n        mapping(uint16=> Tick.Info) storage self, \\n        uint16 tick, \\n        bool isAsk\\n        ) internal {\\n        Tick.Info storage info = self[tick]; \\n        if(isAsk) {\\n            info.askLiquidityGross = 0;\\n            info.askNumCross++; \\n            console.log('tick??', tick); \\n        }\\n        else {\\n            info.bidLiquidityGross = 0; \\n            info.bidNumCross++; \\n        }\\n    }\\n\\n    function updateOneTimeLiquidity(\\n        mapping(uint16=> Tick.Info) storage self, \\n        uint16 tick, \\n        int128 oneTimeLiquidityDelta,\\n        bool isAsk\\n        ) internal {\\n        if (isAsk) self[tick].askLiquidityGross = addDelta(self[tick].askLiquidityGross, oneTimeLiquidityDelta); \\n        else self[tick].bidLiquidityGross = addDelta(self[tick].bidLiquidityGross, oneTimeLiquidityDelta);\\n    }\\n\\n    function update(\\n        mapping(uint16 => Tick.Info) storage self,\\n        uint16 tick,\\n        uint16 tickCurrent,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthGlobalBase, \\n        uint256 feeGrowthGlobalTrade, \\n        bool upper\\n    ) internal returns (bool flipped) {\\n        Tick.Info storage info = self[tick];\\n\\n        uint128 liquidityGrossBefore = info.liquidityGross; \\n        uint128 liquidityGrossAfter = addDelta(liquidityGrossBefore, liquidityDelta); \\n\\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\\n\\n        if(liquidityGrossBefore == 0) {\\n            if(tick<=tickCurrent){\\n            info.feeGrowthOutsideBase = feeGrowthGlobalBase; \\n            info.feeGrowthOutsideTrade = feeGrowthGlobalTrade; \\n            }\\n            info.initialized = true; \\n        }\\n        info.liquidityGross = liquidityGrossAfter;\\n\\n        info.liquidityNet = upper \\n            ? (int256(info.liquidityNet)-liquidityDelta).toInt128()\\n            : (int256(info.liquidityNet)+liquidityDelta).toInt128(); \\n    }\\n\\n    function clear(mapping(uint16 => Tick.Info) storage self, uint16 tick) internal {\\n        delete self[tick];\\n    }\\n\\n    function cross(\\n        mapping(uint16 => Tick.Info) storage self,\\n        uint16 tick, \\n        uint256 feeGrowthGlobalBase,\\n        uint256 feeGrowthGlobalTrade\\n    ) internal returns (int128 liquidityNet) {\\n        Tick.Info storage info = self[tick]; \\n\\n        liquidityNet = info.liquidityNet; \\n        info.feeGrowthOutsideBase = feeGrowthGlobalBase - info.feeGrowthOutsideBase; \\n        info.feeGrowthOutsideTrade = feeGrowthGlobalTrade - info.feeGrowthOutsideTrade;\\n    }\\n\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n\\n    function getFeeGrowthInside(\\n        mapping(uint16 => Tick.Info) storage self,\\n        uint16 tickLower,\\n        uint16 tickUpper,\\n        uint16 tickCurrent,\\n        uint256 feeGrowthGlobalBase,\\n        uint256 feeGrowthGlobalTrade\\n    ) internal view returns (uint256 feeGrowthInsideBase, uint256 feeGrowthInsideTrade) {\\n        Info storage lower = self[tickLower];\\n        Info storage upper = self[tickUpper];\\n\\n        // calculate fee growth below\\n        uint256 feeGrowthBelowBase;\\n        uint256 feeGrowthBelowTrade;\\n        if (tickCurrent >= tickLower) {\\n            feeGrowthBelowBase = lower.feeGrowthOutsideBase;\\n            feeGrowthBelowTrade = lower.feeGrowthOutsideTrade;\\n        } else {\\n            feeGrowthBelowBase = feeGrowthGlobalBase - lower.feeGrowthOutsideBase;\\n            feeGrowthBelowTrade = feeGrowthGlobalTrade - lower.feeGrowthOutsideTrade;\\n        }\\n\\n        // calculate fee growth above\\n        uint256 feeGrowthAboveBase;\\n        uint256 feeGrowthAboveTrade;\\n        if (tickCurrent < tickUpper) {\\n            feeGrowthAboveBase = upper.feeGrowthOutsideBase;\\n            feeGrowthAboveTrade = upper.feeGrowthOutsideTrade;\\n        } else {\\n            feeGrowthAboveBase = feeGrowthGlobalBase - upper.feeGrowthOutsideBase;\\n            feeGrowthAboveTrade = feeGrowthGlobalTrade - upper.feeGrowthOutsideTrade;\\n        }\\n\\n        feeGrowthInsideBase = feeGrowthGlobalBase - feeGrowthBelowBase - feeGrowthAboveBase;\\n        feeGrowthInsideTrade = feeGrowthGlobalTrade - feeGrowthBelowTrade - feeGrowthAboveTrade;\\n    }\\n}\\n\\n\\ncontract SpotPool is GranularBondingCurve{\\n\\n    ERC20 BaseToken; //junior\\n    ERC20 TradeToken; //senior \\n    // GranularBondingCurve public pool; \\n\\n    constructor(\\n        address _baseToken, \\n        address _tradeToken\\n        )GranularBondingCurve(_baseToken,_tradeToken){\\n        BaseToken = ERC20(_baseToken); \\n        TradeToken = ERC20(_tradeToken); \\n        // pool = new GranularBondingCurve(_baseToken,_tradeToken); \\n    }\\n\\n    function handleBuys(address recipient, uint256 amountOut, uint256 amountIn, bool up) internal {\\n\\n        if(up){\\n            console.log('balances', TradeToken.balanceOf(address(this)), BaseToken.balanceOf(address(this)));\\n            console.log('togive', amountOut, amountIn); \\n            TradeToken.transfer(recipient, amountOut); \\n            console.log('balofre', BaseToken.balanceOf(recipient));\\n            BaseToken.transferFrom(recipient, address(this), amountIn);\\n        }\\n\\n        else{\\n            BaseToken.transfer(recipient, amountOut); \\n            TradeToken.transferFrom(recipient, address(this), amountIn);\\n        }\\n    }\\n\\n    // function getCurPrice() external view returns(uint256){\\n    //     return uint256(pool.getCurPrice());\\n    // }\\n\\n    /// @notice if buyTradeForBase, move up, and vice versa \\n    function takerTrade(\\n        address recipient, \\n        bool buyTradeForBase, \\n        int256 amountIn,\\n        uint256 priceLimit, \\n        bytes calldata data        \\n        ) external returns(uint256 poolamountIn, uint256 poolamountOut){\\n\\n        (poolamountIn, poolamountOut) = this.trade(\\n            recipient, \\n            buyTradeForBase, \\n            amountIn,  \\n            priceLimit, \\n            data\\n        ); \\n        handleBuys(recipient, poolamountOut, poolamountIn, buyTradeForBase); \\n    }\\n\\n    /// @notice specify how much trade trader intends to sell/buy \\n    function makerTrade(\\n        bool buyTradeForBase,\\n        uint256 amountIn,\\n        uint16 point\\n        ) external {\\n        (uint256 toEscrowAmount, uint128 crossId) \\n                = this.placeLimitOrder(msg.sender, \\n                    point, \\n                    uint128(liquidityGivenTrade(pointToPrice(point+1), pointToPrice(point), amountIn)), \\n                    !buyTradeForBase); \\n\\n        // Collateral for bids\\n        if (buyTradeForBase) BaseToken.transferFrom(msg.sender, address(this), toEscrowAmount); \\n\\n        // or asks\\n        else TradeToken.transferFrom(msg.sender, address(this), toEscrowAmount); \\n    }\\n\\n    function makerClaim(\\n        uint16 point, \\n        bool buyTradeForBase\\n        ) external {\\n        uint256 claimedAmount = this.claimFilledOrder(\\n            msg.sender, \\n            point, \\n            !buyTradeForBase\\n        ); \\n\\n        if (buyTradeForBase) TradeToken.transfer(msg.sender, claimedAmount);\\n        else BaseToken.transfer(msg.sender, claimedAmount); \\n\\n    }\\n}\\n\\n\\n\\n\\n\\n\",\"keccak256\":\"0x0dbebc2cb6a95e547a45e36907c8f93202dcf4bf655cd94e9fe963653bcdc81d\",\"license\":\"UNLICENSED\"},\"contracts/bonds/boundedDerivatives.sol\":{\"content\":\"pragma solidity ^0.8.9;\\nimport \\\"./GBC.sol\\\"; \\n// import {BoundedDerivativesPool, LinearCurve} from \\\"./GBC.sol\\\"; \\nimport {FixedPointMathLib} from \\\"lib/solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {ERC20} from \\\"./libraries.sol\\\"; \\nimport \\\"lib/forge-std/src/console.sol\\\";\\n\\n/// @notice Uses AMM as a derivatives market,where the price is bounded between two price\\n/// and mints/burns tradeTokens. \\n/// stores all baseTokens for trading, and also stores tradetokens when providing liquidity, \\n/// @dev Short loss is bounded as the price is bounded, no need to program liquidations logic \\ncontract BoundedDerivativesPool is GranularBondingCurve{\\n    using FixedPointMath for uint256;\\n    using SafeCast for uint256; \\n    // using Position for Position.Info;\\n    // uint256 constant PRECISION = 1e18; \\n    ERC20 public  BaseToken; \\n    ERC20 public  TradeToken; \\n    ERC20 public  s_tradeToken; \\n    uint256 public constant maxPrice = 1e18; \\n\\n    bool immutable noCallBack; \\n    constructor(\\n        address base, \\n        address trade, \\n        address s_trade, \\n        bool _noCallBack\\n        // address _pool \\n        ) GranularBondingCurve(base, trade){\\n        BaseToken =  ERC20(base);\\n        TradeToken = ERC20(trade);\\n        s_tradeToken = ERC20(s_trade);\\n        noCallBack = _noCallBack; \\n    }\\n\\n    /// @notice recipient recieves amountOut in exchange for giving this contract amountIn (base)\\n    function mintAndPull(address recipient, uint256 amountOut, uint256 amountIn, bool isLong) internal  {\\n        \\n        // Mint and Pull \\n        if(isLong) TradeToken.mint(recipient, amountOut); \\n        else s_tradeToken.mint(recipient, amountOut); \\n        BaseToken.transferFrom(recipient,address(this), amountIn); \\n    }\\n\\n    function burnAndPush(address recipient, uint256 amountOut, uint256 amountIn, bool isLong) internal  {\\n        // Burn and Push \\n        if(isLong) TradeToken.burn(recipient, amountIn); \\n        else s_tradeToken.burn(recipient, amountIn); \\n   \\n        BaseToken.transfer(recipient, amountOut); \\n    }\\n\\n    function baseBal() internal view returns(uint256){\\n        return BaseToken.balanceOf(address(this)); \\n    }\\n\\n    /// @notice Long up the curve, or short down the curve \\n    /// @param amountIn is base if long, trade if short\\n    /// @param priceLimit is slippage tolerance\\n    function takerOpen(\\n        bool isLong, \\n        int256 amountIn,\\n        uint256 priceLimit, \\n        bytes calldata data\\n        ) external  returns(uint256 poolamountIn, uint256 poolamountOut ){\\n        if(isLong){\\n            // Buy up \\n            (poolamountIn, poolamountOut) = trade(\\n                msg.sender, \\n                true, \\n                amountIn, \\n                priceLimit, \\n                data\\n            ); \\n            if (noCallBack) mintAndPull(msg.sender, poolamountOut, poolamountIn, true);\\n\\n            else {\\n                uint256 bal = baseBal(); \\n                iTradeCallBack(msg.sender).tradeCallBack(poolamountIn, data); \\n                require(baseBal() >= poolamountIn + bal, \\\"balERR\\\"); \\n                TradeToken.mint(abi.decode(data, (address)), poolamountOut); \\n            }\\n        }\\n\\n        else{\\n            // just shift pool state\\n            (poolamountIn, poolamountOut) = trade(\\n                address(this), \\n                false, \\n                amountIn, \\n                priceLimit, \\n                data\\n            ); \\n            uint b = baseBal(); \\n            console.log('basebal',b , poolamountOut); \\n            require(poolamountOut <= baseBal(), \\\"!ammLiq\\\"); \\n            uint256 cached_poolamountOut = poolamountOut; \\n            // poolamountIn is the number of short tokens minted, poolamountIn * maxprice - poolamountOut is the collateral escrowed\\n            poolamountOut = poolamountIn.mulWadDown(maxPrice) - poolamountOut;\\n\\n            // One s_tradeToken is a representation of debt+sell of one tradetoken\\n            // Escrow collateral required for shorting, where price for long + short = maxPrice, \\n            // so (maxPrice-price of trade) * quantity\\n            if (noCallBack) mintAndPull(msg.sender, poolamountIn, poolamountOut, false);\\n\\n            else{\\n                uint256 bal = baseBal(); \\n                iTradeCallBack(msg.sender).tradeCallBack(poolamountOut, data); \\n                require(baseBal() >= poolamountOut + bal, \\\"balERR\\\"); \\n                s_tradeToken.mint(abi.decode(data,(address)), poolamountIn); \\n\\n                // need to send cached poolamountOut(the area under the curve) data for accounting purposes\\n                poolamountIn = cached_poolamountOut; \\n            }\\n\\n            // BaseToken.transferFrom(msg.sender, address(this), poolamountIn.mulWadDown(maxPrice) - poolamountOut); \\n            // s_tradeToken.mint(msg.sender, uint256(amountIn)); \\n        }\\n\\n    }\\n\\n    /// @param amountIn is trade if long, ALSO trade if short, since getting rid of s_trade \\n    function takerClose(\\n        bool isLong, \\n        int256 amountIn,\\n        uint256 priceLimit, \\n        bytes calldata data\\n        ) external returns(uint256 poolamountIn, uint256 poolamountOut){\\n\\n        // Sell down\\n        if(isLong){\\n            (poolamountIn, poolamountOut) = trade(\\n                msg.sender,\\n                false, \\n                amountIn, //this should be trade tokens\\n                priceLimit, \\n                data\\n            ); \\n\\n            if (noCallBack) burnAndPush(msg.sender, poolamountOut, poolamountIn, true);\\n\\n            else burnAndPush(abi.decode(data, (address)), poolamountOut, poolamountIn, true );                             \\n        }\\n\\n        else{            \\n            // buy up with the baseToken that was transferred to this contract when opened, in is base out is trade\\n            (poolamountIn, poolamountOut) = trade(\\n                msg.sender, \\n                true, \\n                amountIn, \\n                priceLimit, \\n                data\\n            ); \\n            uint256 cached_poolamountIn = poolamountIn; \\n\\n            // collateral used to buy short \\n            poolamountIn = poolamountOut.mulWadDown(maxPrice) - poolamountIn; \\n\\n            if (noCallBack) burnAndPush(msg.sender, poolamountIn,poolamountOut, false);\\n            else {\\n                burnAndPush(abi.decode(data, (address)), poolamountIn, poolamountOut,false ); \\n                poolamountOut = cached_poolamountIn; \\n            }\\n\\n            // s_tradeToken.burn(msg.sender, poolamountOut); \\n            // BaseToken.transfer(msg.sender, poolamountOut.mulWadDown(maxPrice) - poolamountIn);\\n        }\\n    }\\n\\n    /// @notice provides oneTimeliquidity in the range (point,point+1)\\n    /// @param amount is in base if long, trade if in short  \\n    function makerOpen(\\n        uint16 point, \\n        uint256 amount,\\n        bool isLong,\\n        address recipient\\n        )external  returns(uint256 toEscrowAmount, uint128 crossId){\\n\\n        if(isLong){\\n            // escrowAmount is base \\n            (toEscrowAmount, crossId) = placeLimitOrder(\\n                recipient,\\n                point, \\n                uint128(liquidityGivenBase(pointToPrice(point+1), pointToPrice(point), amount)), \\n                false\\n                ); \\n            BaseToken.transferFrom(recipient, address(this), toEscrowAmount); \\n        }\\n\\n        // need to set limit for sells, but claiming process is different then regular sells \\n        else{\\n            // escrowAmount is trade \\n            (toEscrowAmount, crossId) = placeLimitOrder(\\n                recipient, \\n                point,\\n                uint128(liquidityGivenTrade(pointToPrice(point+1), pointToPrice(point),amount)) , \\n                true\\n                ); \\n\\n            // escrow amount is (maxPrice - avgPrice) * quantity \\n            uint256 escrowCollateral = toEscrowAmount - baseGivenLiquidity(\\n                    pointToPrice(point+1), \\n                    pointToPrice(point), \\n                    uint256(amount) //positive since adding asks, not subtracting \\n                    ); \\n            BaseToken.transferFrom(recipient, address(this), escrowCollateral); \\n            toEscrowAmount = escrowCollateral; \\n        }\\n\\n    }\\n\\n    function makerClaimOpen(\\n        uint16 point, \\n        bool isLong, \\n        address recipient\\n        )external returns(uint256 claimedAmount){\\n\\n        if(isLong){\\n            uint256 claimedAmount = claimFilledOrder(recipient, point, false ); \\n\\n            // user already escrowed funds, so need to send him tradeTokens \\n            TradeToken.mint(recipient, claimedAmount);          \\n        }\\n\\n        else{           \\n            s_tradeToken.mint(recipient, \\n                tradeGivenLiquidity(\\n                    pointToPrice(point+1), \\n                    pointToPrice(point), \\n                    getLiq(msg.sender, point, true)\\n                    )\\n                ); \\n\\n            // open short is filled sells, check if sells are filled. If it is,\\n            // claimedAmount of basetokens should already be in this contract \\n            claimedAmount = claimFilledOrder(recipient, point, true ); \\n        }\\n\\n    }\\n    /// @notice amount is trade if long, but ALSO trade if short(since trade quantity also coincides\\n    /// with shortTrade quantity )\\n    function makerClose(\\n        uint16 point, \\n        uint256 amount,\\n        bool isLong, \\n        address recipient\\n        )external returns(uint256 toEscrowAmount, uint128 crossId){\\n\\n        if(isLong){\\n            // close long is putting up trades for sells, \\n            (toEscrowAmount, crossId) = placeLimitOrder(\\n                recipient, \\n                point, \\n                uint128(liquidityGivenTrade(pointToPrice(point+1), pointToPrice(point),amount)), \\n                true\\n                ); \\n            //maybe burn it when claiming, and just escrow? \\n            TradeToken.burn(recipient, toEscrowAmount); \\n        }\\n\\n        else{\\n            // Place limit orders for buys \\n            (toEscrowAmount, crossId) = placeLimitOrder(\\n                recipient, \\n                point,\\n                uint128(liquidityGivenTrade(pointToPrice(point+1), pointToPrice(point),amount)), \\n                false\\n                ); \\n\\n            // burn s_tradeTokens, \\n            s_tradeToken.burn(recipient, amount); \\n\\n        }\\n    }\\n\\n    function makerClaimClose(\\n        uint16 point, \\n        bool isLong, \\n        address recipient\\n        ) external returns(uint256 claimedAmount){\\n\\n        if(isLong){\\n            // Sell is filled, so need to transfer back base \\n            claimedAmount = claimFilledOrder(recipient, point, true ); \\n            BaseToken.transfer(recipient, claimedAmount); \\n        }\\n        else{\\n            uint128 liq = getLiq(recipient, point, false); \\n\\n            // Buy is filled, which means somebody burnt trade, so claimedAmount is in trade\\n            claimedAmount = claimFilledOrder(recipient, point, false);\\n            claimedAmount = claimedAmount.mulWadDown(maxPrice) \\n                            - baseGivenLiquidity(\\n                            pointToPrice(point+1), \\n                            pointToPrice(point), \\n                            liq); \\n            BaseToken.transfer(recipient, claimedAmount);\\n        }\\n    }    \\n\\n    function makerPartiallyClaim(\\n        uint16 point, \\n        bool isLong,\\n        bool open, \\n        address recipient\\n        ) external returns(uint256 baseAmount, uint256 tradeAmount){\\n   \\n        if(open){\\n            if(isLong)(baseAmount, tradeAmount) = claimPartiallyFilledOrder(recipient, point, false); \\n            else (baseAmount, tradeAmount) = claimPartiallyFilledOrder(recipient, point, true);\\n        }\\n        else{\\n            if(isLong)(baseAmount, tradeAmount) = claimPartiallyFilledOrder(recipient, point, true); \\n            else (baseAmount, tradeAmount) = claimPartiallyFilledOrder(recipient, point, false);\\n        }\\n        \\n        BaseToken.transfer(recipient, baseAmount);\\n        TradeToken.mint(recipient, tradeAmount); \\n    }\\n\\n    /// @notice amount is in base if long, trade if short \\n    function makerReduceOpen(\\n        uint16 point, \\n        uint256 amount, \\n        bool isLong, \\n        address recipient\\n        ) external{\\n    \\n        if(isLong){\\n            uint256 returned_amount =reduceLimitOrder(\\n                recipient, \\n                point, \\n                liquidityGivenBase(\\n                    pointToPrice(point+1), \\n                    pointToPrice(point),\\n                    amount\\n                    ).toUint128(), \\n                false\\n                ); \\n            // need to send base back \\n            BaseToken.transfer(recipient, returned_amount); \\n        }\\n        else {\\n            uint128 liq = liquidityGivenTrade(pointToPrice(point+1), pointToPrice(point), amount).toUint128(); \\n            // Reduce asks \\n            reduceLimitOrder(\\n                recipient, \\n                point, \\n                liq, \\n                true\\n                ); \\n\\n            // Need to send escrowed basetoken back, which is shortTrade quantity - baseGivenLiquidity \\n            BaseToken.transfer(recipient, \\n                amount - baseGivenLiquidity(pointToPrice(point+1), pointToPrice(point), liq));\\n        }\\n    }\\n\\n    /// @notice amount is in trade if long, ALSO trade if short \\n    function makerReduceClose(      \\n        uint16 point, \\n        uint256 amount, \\n        bool isLong,\\n        address recipient\\n        ) external{\\n\\n        if(isLong){\\n            uint256 returned_amount = reduceLimitOrder(\\n                recipient, \\n                point, \\n                liquidityGivenTrade(\\n                    uint256(pointToPrice(point+1)), \\n                    uint256(pointToPrice(point)), amount).toUint128(), \\n                true\\n                ); \\n            // need to send trade back \\n            TradeToken.mint(recipient, returned_amount); \\n        }\\n\\n        else{\\n            // reduce limit bids \\n            reduceLimitOrder(\\n                recipient, \\n                point, \\n                liquidityGivenTrade(\\n                    uint256(pointToPrice(point+1)), \\n                    uint256(pointToPrice(point)), amount).toUint128(), \\n                false\\n            ); \\n             \\n            s_tradeToken.mint(recipient, amount); \\n        }\\n    }\\n\\n    // TODO separate contracts \\n    // function provideLiquidity(\\n    //     uint16 pointLower,\\n    //     uint16 pointUpper,\\n    //     uint128 amount, \\n    //     bytes calldata data \\n    //     ) external {\\n\\n    //     (uint256 amount0, uint256 amount1) = provide(\\n    //         msg.sender, \\n    //         pointLower, \\n    //         pointUpper, \\n    //         amount, \\n    //         data \\n    //     ); \\n    //     BaseToken.transferFrom(msg.sender, address(this), amount0); \\n    //     // TradeToken.transferFrom(msg.sender, address(this), amount1);\\n    //     TradeToken.burn(msg.sender, amount1);\\n    // }\\n\\n    // function withdrawLiquidity(\\n    //     uint16 pointLower,\\n    //     uint16 pointUpper,\\n    //     uint128 amount, \\n    //     bytes calldata data \\n    //     )external{\\n\\n    //     (uint256 amountBase, uint256 amountTrade) = remove(\\n    //         msg.sender, \\n    //         pointLower, \\n    //         pointUpper, \\n    //         amount\\n    //     ); \\n      \\n    //     collect(\\n    //         msg.sender, \\n    //         pointLower,\\n    //         pointUpper,\\n    //         type(uint128).max,\\n    //         type(uint128).max\\n    //     ); \\n\\n    //     BaseToken.transfer(msg.sender,  amountBase); \\n    //     TradeToken.mint(msg.sender, amountTrade); \\n    // }\\n\\n    //TODO fees, skipping uninit for gas, below functions\\n    // possible attacks: manipulation of price with no liquidityregions, add a bid/ask and a naive \\n    // trader fills, and immediately submit a ask much higher/lower\\n    // gas scales with number of loops, so need to set ticks apart large, or provide minimal liquidity in each tick\\n\\n}\\n\\ninterface iTradeCallBack{\\n    function tradeCallBack(\\n        uint256 amount0,\\n bytes calldata data    ) external;\\n} \\n\",\"keccak256\":\"0x302284a44be40ac9cdfa964cf3244beefa565008d1b901026caa91ad197bd388\"},\"contracts/bonds/libraries.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMath {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    // function toUint256(uint256 y)internal pure returns (uint160 z) {\\n    //     require((z = uint256(y)) == y);\\n    // }\\n    // function toUint210(uint256 y)internal pure returns (uint160 z) {\\n    //     require((z = uint160(y)) == y);\\n    // }\\n    function toUint128(uint256 y)internal pure returns (uint128 z) {\\n        require((z = uint128(y)) == y);\\n    }\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\\n\\ncontract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n    function mint(address to, uint256 amount) public {\\n      _mint(to, amount); \\n    }\\n    function burn(address to, uint256 amount) public {\\n      _burn(to, amount); \\n    }\\n}\",\"keccak256\":\"0x6f4b41b0a3a677144ec92ae040f756a7af61ffe54f497f92d7f20a729b3cb091\"},\"contracts/bonds/synthetic.sol\":{\"content\":\"pragma solidity ^0.8.9;\\nimport { LinearCurve} from \\\"./GBC.sol\\\"; \\nimport {BoundedDerivativesPool} from \\\"./boundedDerivatives.sol\\\"; \\nimport {FixedPointMathLib} from \\\"lib/solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {ERC20} from \\\"./libraries.sol\\\"; \\nimport \\\"lib/forge-std/src/console.sol\\\";\\n\\ncontract ZCBFactory{\\n    function newBond(\\n        string memory name, \\n        string memory description \\n        ) public returns(address) {\\n        ERC20 bondToken = new ERC20(name,description, 18);\\n        return address(bondToken); \\n    }\\n\\n}\\ncontract SyntheticZCBPoolFactory{\\n    address public immutable controller;\\n    address public immutable zcbFactory; \\n    constructor(address _controller, address _zcbFactory){\\n        controller = _controller; \\n        zcbFactory = _zcbFactory; \\n    }\\n\\n    event PoolCreated(address pool, address longZCB, address shortZCB);\\n\\n    /// @notice param base is the collateral used in pool \\n    function newPool(\\n        address base, \\n        address entry\\n        ) external returns(address longZCB, address shortZCB, SyntheticZCBPool pool){\\n        longZCB = ZCBFactory(zcbFactory).newBond(\\\"longZCB\\\", \\\"long\\\");\\n        shortZCB = ZCBFactory(zcbFactory).newBond(\\\"shortZCB\\\", \\\"short\\\");\\n\\n        pool = new SyntheticZCBPool(\\n            base, longZCB, shortZCB, entry, controller\\n        ); \\n        emit PoolCreated(address(pool), longZCB, shortZCB);\\n    }\\n}\\n\\ncontract SyntheticZCBPool is BoundedDerivativesPool{\\n    using FixedPointMathLib for uint256;\\n\\n    uint256 public a_initial;\\n    uint256 public b_initial; // b without discount cap \\n    uint256 public b;\\n    uint256 public discount_cap; \\n    uint256 public discountedReserves; \\n    uint256 public upperBound; \\n    address public immutable controller; \\n    uint256 public constant precision = 1e18; \\n    constructor(address base, \\n        address trade, \\n        address s_trade, \\n        address _entry, \\n        address _controller\\n        )BoundedDerivativesPool(base,trade,s_trade, false){\\n        entry = _entry; \\n        controller = _controller; \\n        }\\n\\n    /// @notice calculate and store initial curve params that takes into account\\n    /// validator rewards(from discounted zcb). For validator rewards, just skew up the initial price\\n    /// These params are used for utilizer bond issuance, but a is set to 0 after issuance phase \\n    /// @param sigma is the proportion of P that is going to be bought at a discount  \\n    function calculateInitCurveParams(\\n        uint256 P, \\n        uint256 I, \\n        uint256 sigma,\\n        uint256 alpha, \\n        uint256 delta) external {\\n        require(msg.sender == controller, \\\"unauthorized\\\"); \\n        b_initial = (2*P).divWadDown(P+I) - precision; \\n        a_initial = (precision-b_initial).divWadDown(P+I); \\n\\n        // Calculate and store maximum tokens for discounts, and get new initial price after saving for discounts\\n        (discount_cap, b) = LinearCurve.amountOutGivenIn(P.mulWadDown(sigma), 0, a_initial, b_initial, true);\\n        (, upperBound )= LinearCurve.amountOutGivenIn(P.mulWadDown(alpha+delta), 0, a_initial, b_initial,true); \\n\\n        // Set initial liquidity and price \\n        setLiquidity(uint128(precision.divWadDown(a_initial))); \\n        setPriceAndPoint(b);\\n    }\\n\\n    /// @notice calculates initparams for pool based instruments \\n    /// param endPrice is the inception Price of longZCB, or its price when there is no discount\\n    function calculateInitCurveParamsPool(\\n        uint256 saleAmount, \\n        uint256 initPrice, \\n        uint256 endPrice, \\n        uint256 sigma\\n        ) external returns(uint256 managementFee){\\n        require(msg.sender == controller, \\\"unauthorized\\\"); \\n        //TODO these fails at some inputs\\n        uint256 saleAmountQty = (2*saleAmount).divWadDown(initPrice +endPrice); \\n        uint256 a = (endPrice - initPrice).divWadDown(saleAmountQty); \\n        \\n        //Set discount cap as saleAmount * sigma \\n        (discount_cap, ) = LinearCurve.amountOutGivenIn(saleAmount.mulWadDown(sigma),0, a, initPrice,true ); \\n        b = initPrice; \\n\\n        // How much total discounts are validators and managers getting\\n        managementFee = discount_cap.mulWadDown(endPrice) \\n            - saleAmount.mulWadDown(sigma) + saleAmountQty.mulWadDown(endPrice) - saleAmount ; \\n\\n        // set initial liquidity and price \\n        setLiquidity(uint128(precision.divWadDown(a))); \\n        setPriceAndPoint(b); \\n        setDynamicLiquidity(priceToPoint(endPrice), type(int128).max); \\n        setModifyLiqPoint(priceToPoint(endPrice)); \\n    }\\n\\n    /// @notice computes area between the curve and max price for given storage parameters\\n    function areaBetweenCurveAndMax(uint256 amount) public view returns(uint256){\\n        (uint256 amountDelta, ) = LinearCurve.amountOutGivenIn(amount, 0, a_initial, b_initial, true); \\n        return amountDelta.mulWadDown(maxPrice) - amount; \\n    }\\n\\n    /// @notice mints new zcbs \\n    function trustedDiscountedMint(\\n        address receiver, \\n        uint256 amount \\n        ) external{\\n        require(msg.sender == entry, \\\"entryERR\\\"); \\n\\n        TradeToken.mint(receiver, amount);\\n        discountedReserves += amount;\\n    }\\n\\n\\n    function trustedBurn(\\n        address trader, \\n        uint256 amount, \\n        bool long\\n        ) external {\\n        require(msg.sender == entry, \\\"entryERR\\\"); \\n\\n        if (long) TradeToken.burn(trader, amount); \\n        else s_tradeToken.burn(trader, amount);\\n    }\\n\\n    function flush(address flushTo, uint256 amount) external {\\n        require(msg.sender == controller, \\\"entryERR\\\"); \\n        if (amount == type(uint256).max) BaseToken.transfer(flushTo, baseBal()); \\n        else BaseToken.transfer(flushTo, amount); \\n    }\\n\\n    /// @notice resets AMM liquidity to 0 and make it ready to be liq provisioned \\n    /// by anyone \\n    function resetLiq() external{\\n        require(msg.sender == controller, \\\"entryERR\\\"); \\n        setLiquidity(0); \\n        amortizeLiq(); \\n    }\\n\\n}\\n\",\"keccak256\":\"0x6de188036559cd304e9c0b8d9fe0dbf00bbc6c0a37639852832a1f1df168ec99\"},\"lib/forge-std/src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\"},\"lib/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b62af9baf5b8e991ed7531bc87f45550ba9d61e8dbff5caf237ccaf3a3fd843\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051615fdb380380615fdb83398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a051615f0f6100cc60003960008181608d0152818160f5015261020701526000818160cc01526102840152615f0f6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063981f513614610046578063a1a76dc014610088578063f77c4791146100c7575b600080fd5b610059610054366004610376565b6100ee565b604080516001600160a01b03948516815292841660208401529216918101919091526060015b60405180910390f35b6100af7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007f565b6100af7f000000000000000000000000000000000000000000000000000000000000000081565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c15583026040518163ffffffff1660e01b8152600401610175906040808252600790820152663637b733ad21a160c91b6060820152608060208201819052600490820152636c6f6e6760e01b60a082015260c00190565b6020604051808303816000875af1158015610194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b891906103af565b604080516360aac18160e11b81526004810191909152600860448201526739b437b93a2d21a160c11b60648201526080602482015260056084820152641cda1bdc9d60da1b60a48201529093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c15583029060c4016020604051808303816000875af1158015610258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027c91906103af565b9150848383867f00000000000000000000000000000000000000000000000000000000000000006040516102af90610351565b6001600160a01b0395861681529385166020850152918416604084015283166060830152909116608082015260a001604051809103906000f0801580156102fa573d6000803e3d6000fd5b50604080516001600160a01b038381168252868116602083015285168183015290519192507f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b919081900360600190a19250925092565b615b06806103d483390190565b6001600160a01b038116811461037357600080fd5b50565b6000806040838503121561038957600080fd5b82356103948161035e565b915060208301356103a48161035e565b809150509250929050565b6000602082840312156103c157600080fd5b81516103cc8161035e565b939250505056fe6101806040523480156200001257600080fd5b5060405162005b0638038062005b06833981016040819052620000359162000120565b6001600160a01b0380851660e052851661010052600060a081905260c0819052610120819052859085908590838362000078670de0b6b3a7640000606462000190565b600280546001600160801b0319166001600160801b0392909216919091179055505033608052600980546001600160a01b03199081166001600160a01b0396871617909155600a8054821694861694909417909355600b80548416928516929092179091551515610140526005805490911693821693909317909255166101605250620001ce915050565b80516001600160a01b03811681146200011b57600080fd5b919050565b600080600080600060a086880312156200013957600080fd5b620001448662000103565b9450620001546020870162000103565b9350620001646040870162000103565b9250620001746060870162000103565b9150620001846080870162000103565b90509295509295909350565b60006001600160801b0382811684821681151582840482111615620001c557634e487b7160e01b600052601160045260246000fd5b02949350505050565b60805160a05160c05160e0516101005161012051610140516101605161587e6200028860003960008181610bf20152818161231701528181612de60152818161301f0152613476015260008181611d7b01528181611f820152818161285d01526128dc01526000610af7015260008181610abd015281816119120152611c24015260008181610b31015281816119380152611c4a01526000610a96015260008181610b5801526110300152600061083e015261587e6000f3fe608060405234801561001057600080fd5b50600436106104115760003560e01c80638ce2699911610220578063b501c28411610130578063df99f8bf116100b8578063e7ca189a11610087578063e7ca189a14610bc7578063f0bb81b314610bda578063f77c479114610bed578063f83d08ba14610c14578063f9734a2414610c1c57600080fd5b8063df99f8bf14610b8e578063e37699c914610ba1578063e38d6b5c146108f8578063e7c3614f14610bb457600080fd5b8063c93ac3ed116100ff578063c93ac3ed14610adf578063d0c93a7c14610af2578063d3b5dc3b146108f8578063d83678ac14610b2c578063ddca3f4314610b5357600080fd5b8063b501c2841461095c578063b9033a391461096f578063c45a015514610a91578063c55dae6314610ab857600080fd5b80639c9d7d3f116101b3578063ac4bc1cb11610182578063ac4bc1cb14610907578063af0d37bc1461091a578063b04a69fd1461092d578063b09ad8a014610940578063b29d9b6e1461094957600080fd5b80639c9d7d3f146108bf578063a1217e7d146108d2578063a74d74d4146108e5578063aaf5eb68146108f857600080fd5b80639314b03f116101ef5780639314b03f14610873578063957343f01461088657806396fd1c42146108995780639b608089146108ac57600080fd5b80638ce269991461081e5780638d01450f146108315780638da5cb5b1461083957806390f817021461086057600080fd5b8063402d44fb11610326578063659a544a116102ae5780636e2f7ad31161027d5780636e2f7ad3146107c35780636ed75596146107cc5780637063b06c146107ef5780637f1d9ae6146107f857806380c0c3e71461080b57600080fd5b8063659a544a1461078157806367f239dd1461078a57806368087cc31461079d578063681504cd146107b057600080fd5b80634df7e3d0116102f55780634df7e3d014610688578063514ea4bf14610691578063556769ba14610757578063558bdb291461076a5780635bfa896a1461077357600080fd5b8063402d44fb1461063a57806342b6c9fb1461064d57806342bc5292146106605780634a3ca7171461067557600080fd5b80631816eb13116103a95780632353b18e116103785780632353b18e1461054b578063244d59cb1461057157806332530d7f1461058457806334327d8b146105975780633850c7bd146105aa57600080fd5b80631816eb13146104de5780631a686502146104e75780631d2637ab146105125780632130ce0d1461051b57600080fd5b806311e715d6116103e557806311e715d6146104945780631376ff3e146104af57806314e2b929146104c2578063159054ea146104d557600080fd5b80624b2045146104165780630821671214610443578063098bcc561461045657806310f2222114610469575b600080fd5b610429610424366004614e97565b610c2f565b604080519283526020830191909152015b60405180910390f35b610429610451366004614f25565b611595565b610429610464366004614f96565b6116cd565b600b5461047c906001600160a01b031681565b6040516001600160a01b03909116815260200161043a565b6001546001600160a01b03165b60405190815260200161043a565b6104a16104bd366004614ffd565b6117e8565b6104a16104d036600461504a565b6119ef565b6104a161271081565b6104a160105481565b6002546104fa906001600160801b031681565b6040516001600160801b03909116815260200161043a565b6104a160075481565b61052e610529366004614ffd565b611ab1565b604080519283526001600160801b0390911660208301520161043a565b61055e61055936600461504a565b611d30565b60405161ffff909116815260200161043a565b61042961057f366004615063565b611d5c565b6104296105923660046150cd565b6120e8565b6104a16105a5366004615116565b61230a565b6001546105f5906001600160a01b0381169061ffff600160a01b820481169160ff600160b01b8204811692600160b81b8304821692600160c01b810490921691600160c81b90041686565b604080516001600160a01b03909716875261ffff958616602088015260ff909416938601939093529015156060850152151560808401521660a082015260c00161043a565b6104fa610648366004615148565b612542565b6104a161065b3660046150cd565b612602565b61067361066e366004615185565b6127d5565b005b6104a16106833660046151a2565b612821565b6104a1600e5481565b6106fc61069f36600461504a565b600460208190526000918252604090912080546001820154600283015460038401549484015460058501546006909501546001600160801b0380861697600160801b96879004821697828716979096048216959190941693929189565b604080516001600160801b039a8b168152988a1660208a015296891696880196909652938716606087015295909116608085015260a084015260c083019390935260e08201929092526101008101919091526101200161043a565b610429610765366004615063565b61283e565b6104a1600d5481565b6104a1662386f26fc1000081565b6104a160065481565b60055461047c906001600160a01b031681565b61052e6107ab3660046151ce565b612939565b6106736107be366004615204565b612b17565b6104a1600c5481565b6107df6107da3660046150cd565b612bc0565b604051901515815260200161043a565b6104a1600f5481565b610429610806366004615230565b612c79565b6104a1610819366004615286565b612d7e565b61047c61082c3660046152b2565b612dbc565b610673612ddb565b61047c7f000000000000000000000000000000000000000000000000000000000000000081565b60095461047c906001600160a01b031681565b6104a1610881366004615286565b612e4d565b6106736108943660046151ce565b612e63565b6106736108a7366004615204565b613014565b6104fa6108ba3660046150cd565b61311a565b6106736108cd3660046151ce565b61316f565b6104a16108e03660046152cd565b6132a7565b6104a16108f336600461530b565b613413565b6104a1670de0b6b3a764000081565b610673610915366004615330565b61346b565b61042961092836600461536b565b6136a2565b6104a161093b366004615286565b613799565b6104a160115481565b6104a1610957366004615286565b6137cf565b6104a161096a3660046153d5565b6137f6565b610a0d61097d3660046152b2565b60036020819052600091825260409091208054600182015460028301549383015460048401546005909401546001600160801b0380851696600160801b95869004600f0b9694959094600685900b94600160381b81046001600160a01b031694600160d81b820463ffffffff1694600160f81b90920460ff1693828416938190048316928083169291909104168c565b604080516001600160801b039d8e168152600f9c909c0b60208d01528b019990995260608a019790975260069590950b60808901526001600160a01b0390931660a088015263ffffffff90911660c0870152151560e0860152851661010085015284166101208401528316610140830152919091166101608201526101800161043a565b61047c7f000000000000000000000000000000000000000000000000000000000000000081565b61047c7f000000000000000000000000000000000000000000000000000000000000000081565b610673610aed36600461540a565b61382d565b610b197f000000000000000000000000000000000000000000000000000000000000000081565b60405160029190910b815260200161043a565b61047c7f000000000000000000000000000000000000000000000000000000000000000081565b610b7a7f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff909116815260200161043a565b600a5461047c906001600160a01b031681565b6104a1610baf3660046151a2565b6138f8565b6104a1610bc2366004615286565b613906565b61052e610bd53660046151ce565b61394e565b6104a1610be83660046152cd565b613a26565b61047c7f000000000000000000000000000000000000000000000000000000000000000081565b610673613b5a565b6104a1610c2a366004615286565b613ba5565b60055460009081906001600160a01b03163314610c675760405162461bcd60e51b8152600401610c5e9061542a565b60405180910390fd5b60005460ff1615610c8a5760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff1916600117905560408051808201909152600f81526e2d2d2d4e65772054726164652d2d2d60881b6020820152610cc690613c6b565b6040805160c0810182526001546001600160a01b03808216835261ffff600160a01b83048116602080860182905260ff600160b01b8604811687890152600160b81b860481161515606080890191909152600160c01b87049091161515608080890191909152600160c81b90960490931660a08701528651610100810188528d81526000918101829052865190941696840196909652908201529192662386f26fc1000092909181018b610d7c57600754610d80565b6006545b8152600060208083018290526002546001600160801b03166040808501829052606094850191909152805193840181528284529083018290528281018290528301519293509091908b1390610dd59085613cb1565b8015610ddf57508b155b15610e2f57600183604001818151610df79190615488565b9052506040830151610e0890611d30565b61ffff16606084018190526001805461ffff60a01b1916600160a01b830217905560208601525b8b610e415782604001518a1115610e4a565b82604001518a10155b610e825760405162461bcd60e51b8152602060048201526009602482015268383634b6b4ba22a92960b91b6044820152606401610c5e565b610e8e61082c8b611d30565b6001600160a01b031699505b825115801590610eae575089836040015114155b1561142f57610f0a60405180610100016040528060008152602001600061ffff1681526020016000151581526020016000815260200160008152602001600081526020016000815260200160006001600160801b031681525090565b604084015181526060840151610f2190868f6137f6565b60608201528c610f415760018460600151610f3c919061549b565b610f51565b6060840151610f519060016154bd565b61ffff1660208201526060840151610f6b90600390613cc5565b6001600160801b031660e082015281610fa857610fa38160e001518560c00151610f9591906154d8565b6001600160801b0316613dd4565b610fcd565b610fcd8160e001518560c00151610fbf91906154d8565b6001600160801b0316613e0b565b83526040840151610fde908e613413565b60408085018290528501518451610ff592906137cf565b60208401908152604085810151606084015187518351631922027560e11b815260048101939093526024830191909152604482015262ffffff7f000000000000000000000000000000000000000000000000000000000000000016606482015285516084820152915160a483015284015160c482015273F37F8dAb80146330880c2Efb2dC05c425478197f9063324404ea9060e401608060405180830381865af41580156110a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cb91906154f8565b60c085015260a08401526080830152604080860191909152805180820190915260088152675f5f5f5f5f5f5f5f60c01b602082015261110990613c6b565b61113760405180604001604052806008815260200167435552505249434560c01b8152508560400151613e42565b6111836040518060400160405280601e81526020017f74726164696e673b206c69717569646974792c20616d6f756e746c65667400008152508560c001516001600160801b0316613e42565b835161118e90613e87565b6111da6040518060400160405280601881526020017f6e65787470726963656c696d69742f706f696e746e65787400000000000000008152508260600151836020015161ffff16613ecc565b611201604051806040016040528060018152602001606160f81b8152508460000151613e42565b61123a6040518060400160405280600e81526020016d185b5bdd5b9d1a5b985b991bdd5d60921b81525082608001518360a00151613ecc565b6112686040518060400160405280600381526020016239963160e91b81525084602001518560400151613ecc565b811561128a5760808101518451859061128290839061552e565b9052506112a2565b60808101518451859061129e90839061554e565b9052505b8060a00151846020018181516112b89190615488565b90525060c08401516001600160801b0316156112ff5760c080850151908201516112ea916001600160801b0316613f13565b846080018181516112fb9190615488565b9052505b80606001518460400151036114295760e08101516001600160801b031615611333576060840151611333906003908f613f28565b602081015160065460075460009261134d9260039261401f565b9050866080015115801561137057508660a0015161ffff16826020015161ffff16145b1561139e5760208083015161ffff1660009081526008909152604090205461139b90600f0b82615576565b90505b604080518082018252600a81526964796e616d69634c697160b01b6020808301919091528481015161ffff166000908152600890915291909120546113ec9190600f90810b9084900b613ecc565b8d6113fd576113fa816155ac565b90505b61140b8560c0015182612542565b6001600160801b031660c086015250602081015161ffff1660608501525b50610e9a565b61143c8360400151614072565b600180546001600160a01b0319166001600160a01b03929092169190911790556020850151606084015161ffff9182169116146114995760608301516001805461ffff909216600160a01b0261ffff60a01b199092169190911790555b8260c001516001600160801b03168360e001516001600160801b0316146114df5760c0830151600280546001600160801b0319166001600160801b039092169190911790555b8b156114ee5760808301516006555b8061151f5761271083602001516115059190615488565b83516115108d6155d2565b61151a919061554e565b61154c565b8b61153a578251611530908c61552e565b836020015161154c565b8251611546908c61552e565b83602001515b6040805180820190915260038152623f3f3f60e81b60208201528551929950909750611578918d613ecc565b50506000805460ff19169055509299919850909650505050505050565b60008083156115c65784156115ba576115b0838760006120e8565b90925090506115ea565b6115b0838760016120e8565b84156115d8576115b0838760016120e8565b6115e4838760006120e8565b90925090505b60095460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061161c90869086906004016155ee565b6020604051808303816000875af115801561163b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165f9190615607565b50600a546040516340c10f1960e01b81526001600160a01b03909116906340c10f199061169290869085906004016155ee565b600060405180830381600087803b1580156116ac57600080fd5b505af11580156116c0573d6000803e3d6000fd5b5050505094509492505050565b60055460009081906001600160a01b031633146116fc5760405162461bcd60e51b8152600401610c5e9061542a565b60005460ff161561171f5760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff19166001178155611739600433898961408d565b90508060050154856001600160801b03161161175e57846001600160801b0316611764565b80600501545b92508060060154846001600160801b03161161178957836001600160801b031661178f565b80600601545b915082156117b157828160050160008282546117ab9190615624565b90915550505b81156117d157818160060160008282546117cb9190615624565b90915550505b506000805460ff1916905590969095509350505050565b6005546000906001600160a01b031633146118155760405162461bcd60e51b8152600401610c5e9061542a565b60005460ff16156118385760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff191660019081179091555461ffff851690611861906001600160a01b0316611d30565b61ffff16036118be5760405162461bcd60e51b815260206004820152602360248201527f43616e277420726564756365206f7264657220666f722063757272656e74207460448201526269636b60e81b6064820152608401610c5e565b60006118da33866118d08160016154bd565b600492919061408d565b90506118f26118e8856155ac565b82908560006140f8565b611909856118ff866155ac565b60039190866141cd565b600083611936577f0000000000000000000000000000000000000000000000000000000000000000611958565b7f00000000000000000000000000000000000000000000000000000000000000005b90508361199f5761199a61197061082c8860016154bd565b6001600160a01b031661198288612dbc565b6001600160a01b0316876001600160801b0316613ba5565b6119da565b6119da6119b061082c8860016154bd565b6001600160a01b03166119c288612dbc565b6001600160a01b0316876001600160801b0316612d7e565b6000805460ff19169055979650505050505050565b600c54600d5460405163018b035160e01b8152600481018490526000602482018190526044820193909352606481019190915260016084820152819073F37F8dAb80146330880c2Efb2dC05c425478197f9063018b03519060a4016040805180830381865af4158015611a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8a9190615637565b50905082611aa082670de0b6b3a764000061429e565b611aaa9190615624565b9392505050565b60055460009081906001600160a01b03163314611ae05760405162461bcd60e51b8152600401610c5e9061542a565b60005460ff1615611b035760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff19166001179055828015611b3957506001546001600160a01b0316611b2d86612dbc565b6001600160a01b031611155b15611b775760405162461bcd60e51b815260206004820152600e60248201526d61736b2062656c6f77207072696560901b6044820152606401610c5e565b82158015611ba157506001546001600160a01b0316611b9586612dbc565b6001600160a01b031610155b15611be05760405162461bcd60e51b815260206004820152600f60248201526e626964732061626f7665207072696560881b6044820152606401610c5e565b6000611bf287876118d08160016154bd565b9050611c00600387866142b3565b9150611c0e818686856140f8565b611c1b60038787876141cd565b600084611c48577f0000000000000000000000000000000000000000000000000000000000000000611c6a565b7f00000000000000000000000000000000000000000000000000000000000000005b905084611cb157611cac611c8261082c8960016154bd565b6001600160a01b0316611c9489612dbc565b6001600160a01b0316886001600160801b0316613ba5565b611cec565b611cec611cc261082c8960016154bd565b6001600160a01b0316611cd489612dbc565b6001600160a01b0316886001600160801b0316612d7e565b9350611d1960405180604001604052806009815260200168185b5bdd5b9d189a5960ba1b81525085613e42565b50506000805460ff19169055909590945092505050565b6000670de0b6b3a7640000611d4c83662386f26fc10000613f13565b611d569190615671565b92915050565b6000808615611ed557611d7433600188888888610c2f565b90925090507f000000000000000000000000000000000000000000000000000000000000000015611db157611dac338284600161430b565b6120de565b6000611dbb61445d565b604051636d29069f60e11b8152909150339063da520d3e90611de590869089908990600401615685565b600060405180830381600087803b158015611dff57600080fd5b505af1158015611e13573d6000803e3d6000fd5b505050508083611e239190615488565b611e2b61445d565b1015611e625760405162461bcd60e51b81526020600482015260066024820152653130b622a92960d11b6044820152606401610c5e565b600a546001600160a01b03166340c10f19611e7f86880188615185565b846040518363ffffffff1660e01b8152600401611e9d9291906155ee565b600060405180830381600087803b158015611eb757600080fd5b505af1158015611ecb573d6000803e3d6000fd5b50505050506120de565b611ee430600088888888610c2f565b90925090506000611ef361445d565b9050611f1f6040518060400160405280600781526020016618985cd958985b60ca1b8152508284613ecc565b611f2761445d565b821115611f605760405162461bcd60e51b815260206004820152600760248201526621616d6d4c697160c81b6044820152606401610c5e565b8180611f7485670de0b6b3a76400006144cf565b611f7e9190615624565b92507f000000000000000000000000000000000000000000000000000000000000000015611fb857611fb3338585600061430b565b6120db565b6000611fc261445d565b604051636d29069f60e11b8152909150339063da520d3e90611fec9087908b908b90600401615685565b600060405180830381600087803b15801561200657600080fd5b505af115801561201a573d6000803e3d6000fd5b50505050808461202a9190615488565b61203261445d565b10156120695760405162461bcd60e51b81526020600482015260066024820152653130b622a92960d11b6044820152606401610c5e565b600b546001600160a01b03166340c10f19612086888a018a615185565b876040518363ffffffff1660e01b81526004016120a49291906155ee565b600060405180830381600087803b1580156120be57600080fd5b505af11580156120d2573d6000803e3d6000fd5b50505050819450505b50505b9550959350505050565b60055460009081906001600160a01b031633146121175760405162461bcd60e51b8152600401610c5e9061542a565b60005460ff161561213a5760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff1916600190811782556040805160c08101825282546001600160a01b038116825261ffff600160a01b820481166020840152600160b01b820460ff90811694840194909452600160b81b8204841615156060840152600160c01b820490931615156080830152600160c81b900490911660a082015291906121ca90889088906118d09082906154bd565b90508561ffff166121e783600001516001600160a01b0316611d30565b61ffff16146122285760405162461bcd60e51b815260206004820152600d60248201526c4e6f742063757220707269636560981b6044820152606401610c5e565b600085612249576001820154600160801b90046001600160801b0316612258565b60018201546001600160801b03165b9050612270612266826155ac565b83908860006140f8565b6122878761227d836155ac565b60039190896141cd565b6122be61229861082c8960016154bd565b6001600160a01b031684600001516001600160a01b0316836001600160801b0316612d7e565b93506122f283600001516001600160a01b03166122da89612dbc565b6001600160a01b0316836001600160801b0316613ba5565b6000805460ff19169055989397509295505050505050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146123735760405162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b6044820152606401610c5e565b60006123936123828587615488565b61238d8860026156bb565b906144e4565b905060006123a58261238d8888615624565b905073F37F8dAb80146330880c2Efb2dC05c425478197f63018b03516123cb898761429e565b6040516001600160e01b031960e084901b16815260048101919091526000602482015260448101849052606481018990526001608482015260a4016040805180830381865af4158015612422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124469190615637565b50600f55600e8690558661245a838761429e565b612464898761429e565b600f54612471908961429e565b61247b9190615624565b6124859190615488565b61248f9190615624565b92506124c86124a6670de0b6b3a7640000836144e4565b600280546001600160801b0319166001600160801b0392909216919091179055565b6124d3600e546144f9565b61250a6124df86611d30565b61ffff16600090815260086020526040902080546001600160801b03191660016001607f1b03179055565b61253861251686611d30565b6001805461ffff909216600160c81b0261ffff60c81b19909216919091179055565b5050949350505050565b60008082600f0b12156125af576001600160801b038316612562836155ac565b61256c90856156da565b9150816001600160801b0316106125aa5760405162461bcd60e51b81526020600482015260026024820152614c5360f01b6044820152606401610c5e565b611d56565b6001600160801b0383166125c383856154d8565b9150816001600160801b03161015611d565760405162461bcd60e51b81526020600482015260026024820152614c4160f01b6044820152606401610c5e565b6005546000906001600160a01b0316331461262f5760405162461bcd60e51b8152600401610c5e9061542a565b60005460ff16156126525760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff19166001908117825561267490869086906118d09082906154bd565b90506000612684600386866142b3565b905060008461269d5782546001600160801b03166126b0565b8254600160801b90046001600160801b03165b9050806001600160801b0316826001600160801b0316116127095760405162461bcd60e51b8152602060048201526013602482015272141bdcda5d1a5bdb881b9bdd08199a5b1b1959606a1b6044820152606401610c5e565b60008561272a576001840154600160801b90046001600160801b0316612739565b60018401546001600160801b03165b9050851561276b5761276461275261082c8960016154bd565b6001600160a01b03166122da89612dbc565b94506127a9565b6127a661277c61082c8960016154bd565b6001600160a01b031661278e89612dbc565b6001600160a01b0316836001600160801b0316612d7e565b94505b6127bf6127b5826155ac565b85908860006140f8565b50506000805460ff191690555090949350505050565b6005546001600160a01b031633146127ff5760405162461bcd60e51b8152600401610c5e9061542a565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600061282e600384613cc5565b6001600160801b03169392505050565b60008086156128a65761285633600088888888610c2f565b90925090507f00000000000000000000000000000000000000000000000000000000000000001561288e57611dac338284600161454f565b611dac61289d84860186615185565b8284600161454f565b6128b533600188888888610c2f565b909250905081806128ce83670de0b6b3a76400006144cf565b6128d89190615624565b92507f0000000000000000000000000000000000000000000000000000000000000000156129125761290d338484600061454f565b61292e565b61292a61292185870187615185565b8484600061454f565b8091505b509550959350505050565b6000808315612a0a57612980838761297961295861082c8360016154bd565b6001600160a01b031661296a8b612dbc565b6001600160a01b03168a613906565b6000611ab1565b6009546040516323b872dd60e01b81526001600160a01b0387811660048301523060248301526044820185905293955091935091909116906323b872dd906064016020604051808303816000875af11580156129e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a049190615607565b50612b0e565b612a488387612a41612a2061082c8360016154bd565b6001600160a01b0316612a328b612dbc565b6001600160a01b03168a613799565b6001611ab1565b90925090506000612a81612a6061082c8960016154bd565b6001600160a01b0316612a7289612dbc565b6001600160a01b031688613ba5565b612a8b9084615624565b6009546040516323b872dd60e01b81526001600160a01b038781166004830152306024830152604482018490529293509116906323b872dd906064016020604051808303816000875af1158015612ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0a9190615607565b5091505b94509492505050565b6005546001600160a01b03163314612b415760405162461bcd60e51b8152600401610c5e906156fa565b600a546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990612b7390859085906004016155ee565b600060405180830381600087803b158015612b8d57600080fd5b505af1158015612ba1573d6000803e3d6000fd5b505050508060106000828254612bb79190615488565b90915550505050565b600080612bd385856118d08160016154bd565b90506000612be3600386866142b3565b9050600084612bfc5782546001600160801b0316612c0f565b8254600160801b90046001600160801b03165b9050600085612c32576001840154600160801b90046001600160801b0316612c41565b60018401546001600160801b03165b90506000816001600160801b0316118015612c6d5750816001600160801b0316836001600160801b0316115b98975050505050505050565b60055460009081906001600160a01b03163314612ca85760405162461bcd60e51b8152600401610c5e9061542a565b60005460ff1615612ccb5760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff19166001178155604080516080810182526001600160a01b038916815261ffff808916602083015287169181019190915281908190612d219060608101612d17896155ac565b600f0b9052614655565b9250925092506000821180612d365750600081115b15612d6657818360050154612d4b9190615488565b818460060154612d5b9190615488565b600685015560058401555b6000805460ff19169055909890975095505050505050565b600082841015612da05760405162461bcd60e51b8152600401610c5e9061571c565b612db482612dae8587615624565b906144cf565b949350505050565b6000611d56612dd6662386f26fc1000061ffff85166156bb565b614072565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612e235760405162461bcd60e51b8152600401610c5e906156fa565b600280546001600160801b0319169055612e4b6001805460ff60c01b1916600160c01b179055565b565b6000612db482612e5d8587615624565b906148ed565b8115612f0d576000612e908286612e89612e8461295861082c8460016154bd565b614902565b60006117e8565b60095460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90612ec390859085906004016155ee565b6020604051808303816000875af1158015612ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f069190615607565b505061300e565b6000612f44612e84612f2361082c8860016154bd565b6001600160a01b0316612f3588612dbc565b6001600160a01b031687613799565b9050612f5382868360016117e8565b506009546001600160a01b031663a9059cbb83612fa1612f7761082c8a60016154bd565b6001600160a01b0316612f898a612dbc565b6001600160a01b0316866001600160801b0316613ba5565b612fab9088615624565b6040518363ffffffff1660e01b8152600401612fc89291906155ee565b6020604051808303816000875af1158015612fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300b9190615607565b50505b50505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461305c5760405162461bcd60e51b8152600401610c5e906156fa565b60001981036130e4576009546001600160a01b031663a9059cbb8361307f61445d565b6040518363ffffffff1660e01b815260040161309c9291906155ee565b6020604051808303816000875af11580156130bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130df9190615607565b505050565b60095460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061309c90859085906004016155ee565b5050565b60008161314a5761313184846118d08160016154bd565b60010154600160801b90046001600160801b0316612db4565b61315a84846118d08160016154bd565b600101546001600160801b0316949350505050565b81156132025760006131978286613190612e84612a2061082c8460016154bd565b60016117e8565b600a546040516340c10f1960e01b81529192506001600160a01b0316906340c10f19906131ca90859085906004016155ee565b600060405180830381600087803b1580156131e457600080fd5b505af11580156131f8573d6000803e3d6000fd5b505050505061300e565b61323c8185612e89612e8461321b61082c8460016154bd565b6001600160a01b031661322d8a612dbc565b6001600160a01b031689613799565b50600b546040516340c10f1960e01b81526001600160a01b03909116906340c10f199061326f90849087906004016155ee565b600060405180830381600087803b15801561328957600080fd5b505af115801561329d573d6000803e3d6000fd5b5050505050505050565b60008215613337576132bb82856001612602565b60095460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906132ee90859085906004016155ee565b6020604051808303816000875af115801561330d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133319190615607565b50611aaa565b60006133458386600061311a565b905061335383866000612602565b915061337861336661082c8760016154bd565b6001600160a01b03166122da87612dbc565b61338a83670de0b6b3a76400006144cf565b6133949190615624565b60095460405163a9059cbb60e01b81529193506001600160a01b03169063a9059cbb906133c790869086906004016155ee565b6020604051808303816000875af11580156133e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061340a9190615607565b50509392505050565b60008061341f84611d30565b90508215801561343a575061343861ffff82168561573f565b155b61344c5761344781612dbc565b61345a565b61345a61082c60018361549b565b6001600160a01b0316949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146134d25760405162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b6044820152606401610c5e565b670de0b6b3a76400006134e86123828688615488565b6134f29190615624565b600d556135176135028587615488565b600d5461238d90670de0b6b3a7640000615624565b600c5573F37F8dAb80146330880c2Efb2dC05c425478197f63018b035161353e878661429e565b600c54600d546040516001600160e01b031960e086901b168152600481019390935260006024840152604483019190915260648201526001608482015260a4016040805180830381865af415801561359a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135be9190615637565b600e55600f5573F37F8dAb80146330880c2Efb2dC05c425478197f63018b03516135f26135eb8486615488565b889061429e565b600c54600d546040516001600160e01b031960e086901b168152600481019390935260006024840152604483019190915260648201526001608482015260a4016040805180830381865af415801561364e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136729190615637565b60115550600c54613690906124a690670de0b6b3a7640000906144e4565b61369b600e546144f9565b5050505050565b60055460009081906001600160a01b031633146136d15760405162461bcd60e51b8152600401610c5e9061542a565b60005460ff16156136f45760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff191660011790556001600160801b0385166137425760405162461bcd60e51b81526020600482015260086024820152670c08185b5bdd5b9d60c21b6044820152606401610c5e565b61377f60405180608001604052808a6001600160a01b031681526020018961ffff1681526020018861ffff16815260200187600f0b815250614655565b6000805460ff19169055909a909950975050505050505050565b6000828410156137bb5760405162461bcd60e51b8152600401610c5e9061571c565b612db46137c88486615624565b8390613f13565b6000816000036137e25750600019611aaa565b612db4826137f08587615624565b90613f13565b6000811561381f578261380a8560016154bd565b61ffff1661381891906156bb565b9050611aaa565b6138188361ffff86166156bb565b6005546001600160a01b031633146138575760405162461bcd60e51b8152600401610c5e906156fa565b80156138c657600a54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061388f90869086906004016155ee565b600060405180830381600087803b1580156138a957600080fd5b505af11580156138bd573d6000803e3d6000fd5b50505050505050565b600b54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061388f90869086906004016155ee565b600061282e600384846142b3565b6000828410156139285760405162461bcd60e51b8152600401610c5e9061571c565b612db46137c8600261393a8688615488565b6139449190615671565b612dae8688615624565b60008083156139da5761396d8387612a41612a2061082c8360016154bd565b600a54604051632770a7eb60e21b81529294509092506001600160a01b031690639dc29fac906139a390869086906004016155ee565b600060405180830381600087803b1580156139bd57600080fd5b505af11580156139d1573d6000803e3d6000fd5b50505050612b0e565b6139f08387612979612a2061082c8360016154bd565b600b54604051632770a7eb60e21b81529294509092506001600160a01b031690639dc29fac9061169290869089906004016155ee565b60008215613aa7576000613a3c83866000612602565b600a546040516340c10f1960e01b81529192506001600160a01b0316906340c10f1990613a6f90869085906004016155ee565b600060405180830381600087803b158015613a8957600080fd5b505af1158015613a9d573d6000803e3d6000fd5b5050505050611aaa565b600b546001600160a01b03166340c10f1983613aff613aca61082c8960016154bd565b6001600160a01b0316613adc89612dbc565b6001600160a01b0316613af1338b600161311a565b6001600160801b0316612d7e565b6040518363ffffffff1660e01b8152600401613b1c9291906155ee565b600060405180830381600087803b158015613b3657600080fd5b505af1158015613b4a573d6000803e3d6000fd5b50505050612db482856001612602565b6005546001600160a01b03163314613b845760405162461bcd60e51b8152600401610c5e9061542a565b6001805460ff60b81b198116600160b81b9182900460ff1615909102179055565b600082841015613bc75760405162461bcd60e51b8152600401610c5e9061571c565b73F37F8dAb80146330880c2Efb2dC05c425478197f636ca35e9e613bec868686612d7e565b6000613bf786613e0b565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260648101869052608401602060405180830381865af4158015613c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db49190615753565b613cae81604051602401613c7f91906157b2565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052614918565b50565b6000613cbd828461573f565b159392505050565b61ffff811660009081526020838152604080832081516101808101835281546001600160801b038082168352600160801b91829004600f0b95830195909552600183015493820193909352600282015460608201526003820154600681900b6080830152600160381b81046001600160a01b031660a0830152600160d81b810463ffffffff1660c0830152600160f81b900460ff16151560e08201526004820154808516610100830181905290849004851661012083015260059092015480851661014083015292909204909216610160820152901580613db257506101208101516001600160801b0316155b613dbe57613dbe6157c5565b806101200151816101000151612db491906154d8565b60008115613dee576125aa670de0b6b3a7640000836148ed565b611d56613dfc836001615488565b670de0b6b3a7640000906148ed565b60008115613e25576125aa670de0b6b3a764000083613f13565b611d56613e33836001615488565b670de0b6b3a764000090613f13565b6131168282604051602401613e589291906157db565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052614918565b613cae81604051602401613e9d91815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f5b1bba960e01b179052614918565b6130df838383604051602401613ee4939291906157fd565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b179052614918565b6000611aaa83670de0b6b3a764000084614939565b61ffff821660009081526020849052604090208115613fc4576004810180546001600160801b03191690556005810180546001600160801b0316906000613f6e83615822565b91906101000a8154816001600160801b0302191690836001600160801b0316021790555050613fbf604051806040016040528060068152602001657469636b3f3f60d01b8152508461ffff16613e42565b61300e565b6004810180546001600160801b03908116909155600582018054600160801b9004909116906010613ff483615822565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050505050565b61ffff8316600090815260208590526040902080546001820154600160801b909104600f0b91906140509085615624565b600182015560028101546140649084615624565b600290910155949350505050565b806001600160a01b038116811461408857600080fd5b919050565b6040805160609490941b6bffffffffffffffffffffffff191660208086019190915260f093841b6001600160f01b031990811660348701529290931b909116603684015280516018818503018152603890930181528251928201929092206000908152929052902090565b8115614162576001840154614116906001600160801b031684612542565b6001850180546001600160801b0319166001600160801b03929092169190911790556000600f84900b1315613fbf5783546001600160801b03808316600160801b02911617845561300e565b600184015461418190600160801b90046001600160801b031684612542565b6001850180546001600160801b03928316600160801b0292169190911790556000600f84900b131561300e5783546001600160801b0319166001600160801b0391909116179092555050565b80156142365761ffff83166000908152602085905260409020600401546141fd906001600160801b031683612542565b61ffff8416600090815260208690526040902060040180546001600160801b0319166001600160801b039290921691909117905561300e565b61ffff831660009081526020859052604090206004015461426790600160801b90046001600160801b031683612542565b61ffff8416600090815260208690526040902060040180546001600160801b03928316600160801b02921691909117905550505050565b6000611aaa8383670de0b6b3a7640000614958565b6000816142e65761ffff8316600090815260208590526040902060050154600160801b90046001600160801b0316612db4565b505061ffff16600090815260209190915260409020600501546001600160801b031690565b801561437a57600a546040516340c10f1960e01b81526001600160a01b03909116906340c10f199061434390879087906004016155ee565b600060405180830381600087803b15801561435d57600080fd5b505af1158015614371573d6000803e3d6000fd5b505050506143df565b600b546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906143ac90879087906004016155ee565b600060405180830381600087803b1580156143c657600080fd5b505af11580156143da573d6000803e3d6000fd5b505050505b6009546040516323b872dd60e01b81526001600160a01b03868116600483015230602483015260448201859052909116906323b872dd906064015b6020604051808303816000875af1158015614439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369b9190615607565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156144a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144ca9190615753565b905090565b6000611aaa8383670de0b6b3a7640000614939565b6000611aaa83670de0b6b3a764000084614958565b61450281611d30565b6001805461ffff92909216600160a01b0261ffff60a01b1990921691909117905561452c81614072565b600180546001600160a01b0319166001600160a01b039290921691909117905550565b80156145be57600a54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061458790879086906004016155ee565b600060405180830381600087803b1580156145a157600080fd5b505af11580156145b5573d6000803e3d6000fd5b50505050614623565b600b54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac906145f090879086906004016155ee565b600060405180830381600087803b15801561460a57600080fd5b505af115801561461e573d6000803e3d6000fd5b505050505b60095460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061441a90879087906004016155ee565b6040805160c0810182526001546001600160a01b038116825261ffff600160a01b82048116602080850182905260ff600160b01b8504811686880152600160b81b850481161515606080880191909152600160c01b860490911615156080870152600160c81b90940490921660a085015285519186015194860151928601516000958695869590946146e994909390614976565b93508460600151600f0b6000146148e557846020015161ffff16816020015161ffff16101561477b576147746147228660400151612dbc565b6001600160a01b03166147388760200151612dbc565b6001600160a01b031660008860600151600f0b121561476757876060015161475f906155ac565b600f0b612d7e565b8760600151600f0b612d7e565b91506148e5565b846040015161ffff16816020015161ffff1610156148885760025460408601516001600160801b03909116906147f6906147b490612dbc565b6001600160a01b031683600001516001600160a01b031660008960600151600f0b12156147e957886060015161475f906155ac565b8860600151600f0b612d7e565b925061485282600001516001600160a01b03166148168860200151612dbc565b6001600160a01b031660008960600151600f0b121561484557886060015161483d906155ac565b600f0b613ba5565b8860600151600f0b613ba5565b9350614862818760600151612542565b600280546001600160801b0319166001600160801b0392909216919091179055506148e5565b6148e26148988660400151612dbc565b6001600160a01b03166148ae8760200151612dbc565b6001600160a01b031660008860600151600f0b12156148d557876060015161483d906155ac565b8760600151600f0b613ba5565b92505b509193909250565b6000611aaa83670de0b6b3a764000084614a02565b806001600160801b038116811461408857600080fd5b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b82820281151584158583048514171661495157600080fd5b0492915050565b600082600019048411830215820261496f57600080fd5b5091020490565b6000614985600487878761408d565b60065460075491925090600f85900b156149d2576006546007546149b4916003918a9188918a91906000614a30565b506006546007546149d091600391899188918a91906001614a30565b505b6000806149e460038a8a898888614b3c565b90925090506149f585888484614c28565b5050505095945050505050565b828202811515841585830485141716614a1a57600080fd5b6001826001830304018115150290509392505050565b61ffff8616600090815260208890526040812080546001600160801b031682614a598289612542565b6001600160801b0380821615908416801591909114159550909150600003614ab1578861ffff168a61ffff1611614a995760018301879055600283018690555b6003830180546001600160f81b0316600160f81b1790555b82546001600160801b0319166001600160801b03821617835584614af7578254614af290614aed90600f8b810b91600160801b9004900b61554e565b614e1a565b614b15565b8254614b1590614aed90600f8b810b91600160801b9004900b61552e565b83546001600160801b03918216600160801b02911617909255509098975050505050505050565b61ffff80861660008181526020899052604080822088851683529082209193849391929184918291908a1610614b7d57505060018201546002830154614ba1565b6001840154614b8c9089615624565b9150836002015487614b9e9190615624565b90505b6000808b61ffff168b61ffff161015614bc557505060018301546002840154614be9565b6001850154614bd4908b615624565b9150846002015489614be69190615624565b90505b81614bf4858c615624565b614bfe9190615624565b975080614c0b848b615624565b614c159190615624565b9650505050505050965096945050505050565b604080516101208101825285546001600160801b038082168352600160801b918290048116602084015260018801548082169484019490945292048216606082015260028601549091166080820152600385015460a0820152600485015460c0820152600585015460e082015260068501546101008201526000600f85900b8103614cfa57600082608001516001600160801b031611614cef5760405162461bcd60e51b815260206004820152600260248201526104e560f41b6044820152606401610c5e565b506080810151614d0b565b614d08826080015186612542565b90505b6000614d3e83608001516001600160801b0316670de0b6b3a76400008560a0015188614d379190615624565b9190614939565b90506000614d6c84608001516001600160801b0316670de0b6b3a76400008660c0015188614d379190615624565b905086600f0b600014614d97576002880180546001600160801b0319166001600160801b0385161790555b60038801869055600488018590556001600160801b038216151580614dc557506000816001600160801b0316115b1561329d57816001600160801b0316886005016000828254614de79190615488565b92505081905550806001600160801b0316886006016000828254614e0b9190615488565b90915550505050505050505050565b80600f81900b811461408857600080fd5b6001600160a01b0381168114613cae57600080fd5b8015158114613cae57600080fd5b60008083601f840112614e6057600080fd5b50813567ffffffffffffffff811115614e7857600080fd5b602083019150836020828501011115614e9057600080fd5b9250929050565b60008060008060008060a08789031215614eb057600080fd5b8635614ebb81614e2b565b95506020870135614ecb81614e40565b94506040870135935060608701359250608087013567ffffffffffffffff811115614ef557600080fd5b614f0189828a01614e4e565b979a9699509497509295939492505050565b803561ffff8116811461408857600080fd5b60008060008060808587031215614f3b57600080fd5b614f4485614f13565b93506020850135614f5481614e40565b92506040850135614f6481614e40565b91506060850135614f7481614e2b565b939692955090935050565b80356001600160801b038116811461408857600080fd5b600080600080600060a08688031215614fae57600080fd5b8535614fb981614e2b565b9450614fc760208701614f13565b9350614fd560408701614f13565b9250614fe360608701614f7f565b9150614ff160808701614f7f565b90509295509295909350565b6000806000806080858703121561501357600080fd5b843561501e81614e2b565b935061502c60208601614f13565b925061503a60408601614f7f565b91506060850135614f7481614e40565b60006020828403121561505c57600080fd5b5035919050565b60008060008060006080868803121561507b57600080fd5b853561508681614e40565b94506020860135935060408601359250606086013567ffffffffffffffff8111156150b057600080fd5b6150bc88828901614e4e565b969995985093965092949392505050565b6000806000606084860312156150e257600080fd5b83356150ed81614e2b565b92506150fb60208501614f13565b9150604084013561510b81614e40565b809150509250925092565b6000806000806080858703121561512c57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561515b57600080fd5b61516483614f7f565b9150602083013580600f0b811461517a57600080fd5b809150509250929050565b60006020828403121561519757600080fd5b8135611aaa81614e2b565b600080604083850312156151b557600080fd5b6151be83614f13565b9150602083013561517a81614e40565b600080600080608085870312156151e457600080fd5b6151ed85614f13565b9350602085013592506040850135614f6481614e40565b6000806040838503121561521757600080fd5b823561522281614e2b565b946020939093013593505050565b6000806000806080858703121561524657600080fd5b843561525181614e2b565b935061525f60208601614f13565b925061526d60408601614f13565b915061527b60608601614f7f565b905092959194509250565b60008060006060848603121561529b57600080fd5b505081359360208301359350604090920135919050565b6000602082840312156152c457600080fd5b611aaa82614f13565b6000806000606084860312156152e257600080fd5b6152eb84614f13565b925060208401356152fb81614e40565b9150604084013561510b81614e2b565b6000806040838503121561531e57600080fd5b82359150602083013561517a81614e40565b600080600080600060a0868803121561534857600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060008060008060a0878903121561538457600080fd5b863561538f81614e2b565b955061539d60208801614f13565b94506153ab60408801614f13565b93506153b960608801614f7f565b9250608087013567ffffffffffffffff811115614ef557600080fd5b6000806000606084860312156153ea57600080fd5b6153f384614f13565b925060208401359150604084013561510b81614e40565b60008060006060848603121561541f57600080fd5b83356153f381614e2b565b6020808252600990820152684e6f7420456e74727960b81b604082015260600190565b6020808252600b908201526a4552525f5245454e54525960a81b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115611d5657611d56615472565b61ffff8281168282160390808211156154b6576154b6615472565b5092915050565b61ffff8181168382160190808211156154b6576154b6615472565b6001600160801b038181168382160190808211156154b6576154b6615472565b6000806000806080858703121561550e57600080fd5b505082516020840151604085015160609095015191969095509092509050565b81810360008312801583831316838312821617156154b6576154b6615472565b808201828112600083128015821682158216171561556e5761556e615472565b505092915050565b600f81810b9083900b0160016001607f1b0381136f7fffffffffffffffffffffffffffffff1982121715611d5657611d56615472565b600081600f0b60016001607f1b031981036155c9576155c9615472565b60000392915050565b6000600160ff1b82016155e7576155e7615472565b5060000390565b6001600160a01b03929092168252602082015260400190565b60006020828403121561561957600080fd5b8151611aaa81614e40565b81810381811115611d5657611d56615472565b6000806040838503121561564a57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b6000826156805761568061565b565b500490565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60008160001904831182151516156156d5576156d5615472565b500290565b6001600160801b038281168282160390808211156154b6576154b6615472565b60208082526008908201526732b73a393ca2a92960c11b604082015260600190565b602080825260099082015268383934b1b29022a92960b91b604082015260600190565b60008261574e5761574e61565b565b500690565b60006020828403121561576557600080fd5b5051919050565b6000815180845260005b8181101561579257602081850181015186830182015201615776565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611aaa602083018461576c565b634e487b7160e01b600052600160045260246000fd5b6040815260006157ee604083018561576c565b90508260208301529392505050565b606081526000615810606083018661576c565b60208301949094525060400152919050565b60006001600160801b0380831681810361583e5761583e615472565b600101939250505056fea26469706673582212200099b2ec3f9da879753ba5d8567c4229ea3d44c3d5fead92566f2bdf15b0bd3764736f6c63430008100033a26469706673582212206d1f0b424d4fa0ee4467e134cf9ff376d7df75085a4219068462f3a24144f29764736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063981f513614610046578063a1a76dc014610088578063f77c4791146100c7575b600080fd5b610059610054366004610376565b6100ee565b604080516001600160a01b03948516815292841660208401529216918101919091526060015b60405180910390f35b6100af7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007f565b6100af7f000000000000000000000000000000000000000000000000000000000000000081565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c15583026040518163ffffffff1660e01b8152600401610175906040808252600790820152663637b733ad21a160c91b6060820152608060208201819052600490820152636c6f6e6760e01b60a082015260c00190565b6020604051808303816000875af1158015610194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b891906103af565b604080516360aac18160e11b81526004810191909152600860448201526739b437b93a2d21a160c11b60648201526080602482015260056084820152641cda1bdc9d60da1b60a48201529093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c15583029060c4016020604051808303816000875af1158015610258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027c91906103af565b9150848383867f00000000000000000000000000000000000000000000000000000000000000006040516102af90610351565b6001600160a01b0395861681529385166020850152918416604084015283166060830152909116608082015260a001604051809103906000f0801580156102fa573d6000803e3d6000fd5b50604080516001600160a01b038381168252868116602083015285168183015290519192507f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b919081900360600190a19250925092565b615b06806103d483390190565b6001600160a01b038116811461037357600080fd5b50565b6000806040838503121561038957600080fd5b82356103948161035e565b915060208301356103a48161035e565b809150509250929050565b6000602082840312156103c157600080fd5b81516103cc8161035e565b939250505056fe6101806040523480156200001257600080fd5b5060405162005b0638038062005b06833981016040819052620000359162000120565b6001600160a01b0380851660e052851661010052600060a081905260c0819052610120819052859085908590838362000078670de0b6b3a7640000606462000190565b600280546001600160801b0319166001600160801b0392909216919091179055505033608052600980546001600160a01b03199081166001600160a01b0396871617909155600a8054821694861694909417909355600b80548416928516929092179091551515610140526005805490911693821693909317909255166101605250620001ce915050565b80516001600160a01b03811681146200011b57600080fd5b919050565b600080600080600060a086880312156200013957600080fd5b620001448662000103565b9450620001546020870162000103565b9350620001646040870162000103565b9250620001746060870162000103565b9150620001846080870162000103565b90509295509295909350565b60006001600160801b0382811684821681151582840482111615620001c557634e487b7160e01b600052601160045260246000fd5b02949350505050565b60805160a05160c05160e0516101005161012051610140516101605161587e6200028860003960008181610bf20152818161231701528181612de60152818161301f0152613476015260008181611d7b01528181611f820152818161285d01526128dc01526000610af7015260008181610abd015281816119120152611c24015260008181610b31015281816119380152611c4a01526000610a96015260008181610b5801526110300152600061083e015261587e6000f3fe608060405234801561001057600080fd5b50600436106104115760003560e01c80638ce2699911610220578063b501c28411610130578063df99f8bf116100b8578063e7ca189a11610087578063e7ca189a14610bc7578063f0bb81b314610bda578063f77c479114610bed578063f83d08ba14610c14578063f9734a2414610c1c57600080fd5b8063df99f8bf14610b8e578063e37699c914610ba1578063e38d6b5c146108f8578063e7c3614f14610bb457600080fd5b8063c93ac3ed116100ff578063c93ac3ed14610adf578063d0c93a7c14610af2578063d3b5dc3b146108f8578063d83678ac14610b2c578063ddca3f4314610b5357600080fd5b8063b501c2841461095c578063b9033a391461096f578063c45a015514610a91578063c55dae6314610ab857600080fd5b80639c9d7d3f116101b3578063ac4bc1cb11610182578063ac4bc1cb14610907578063af0d37bc1461091a578063b04a69fd1461092d578063b09ad8a014610940578063b29d9b6e1461094957600080fd5b80639c9d7d3f146108bf578063a1217e7d146108d2578063a74d74d4146108e5578063aaf5eb68146108f857600080fd5b80639314b03f116101ef5780639314b03f14610873578063957343f01461088657806396fd1c42146108995780639b608089146108ac57600080fd5b80638ce269991461081e5780638d01450f146108315780638da5cb5b1461083957806390f817021461086057600080fd5b8063402d44fb11610326578063659a544a116102ae5780636e2f7ad31161027d5780636e2f7ad3146107c35780636ed75596146107cc5780637063b06c146107ef5780637f1d9ae6146107f857806380c0c3e71461080b57600080fd5b8063659a544a1461078157806367f239dd1461078a57806368087cc31461079d578063681504cd146107b057600080fd5b80634df7e3d0116102f55780634df7e3d014610688578063514ea4bf14610691578063556769ba14610757578063558bdb291461076a5780635bfa896a1461077357600080fd5b8063402d44fb1461063a57806342b6c9fb1461064d57806342bc5292146106605780634a3ca7171461067557600080fd5b80631816eb13116103a95780632353b18e116103785780632353b18e1461054b578063244d59cb1461057157806332530d7f1461058457806334327d8b146105975780633850c7bd146105aa57600080fd5b80631816eb13146104de5780631a686502146104e75780631d2637ab146105125780632130ce0d1461051b57600080fd5b806311e715d6116103e557806311e715d6146104945780631376ff3e146104af57806314e2b929146104c2578063159054ea146104d557600080fd5b80624b2045146104165780630821671214610443578063098bcc561461045657806310f2222114610469575b600080fd5b610429610424366004614e97565b610c2f565b604080519283526020830191909152015b60405180910390f35b610429610451366004614f25565b611595565b610429610464366004614f96565b6116cd565b600b5461047c906001600160a01b031681565b6040516001600160a01b03909116815260200161043a565b6001546001600160a01b03165b60405190815260200161043a565b6104a16104bd366004614ffd565b6117e8565b6104a16104d036600461504a565b6119ef565b6104a161271081565b6104a160105481565b6002546104fa906001600160801b031681565b6040516001600160801b03909116815260200161043a565b6104a160075481565b61052e610529366004614ffd565b611ab1565b604080519283526001600160801b0390911660208301520161043a565b61055e61055936600461504a565b611d30565b60405161ffff909116815260200161043a565b61042961057f366004615063565b611d5c565b6104296105923660046150cd565b6120e8565b6104a16105a5366004615116565b61230a565b6001546105f5906001600160a01b0381169061ffff600160a01b820481169160ff600160b01b8204811692600160b81b8304821692600160c01b810490921691600160c81b90041686565b604080516001600160a01b03909716875261ffff958616602088015260ff909416938601939093529015156060850152151560808401521660a082015260c00161043a565b6104fa610648366004615148565b612542565b6104a161065b3660046150cd565b612602565b61067361066e366004615185565b6127d5565b005b6104a16106833660046151a2565b612821565b6104a1600e5481565b6106fc61069f36600461504a565b600460208190526000918252604090912080546001820154600283015460038401549484015460058501546006909501546001600160801b0380861697600160801b96879004821697828716979096048216959190941693929189565b604080516001600160801b039a8b168152988a1660208a015296891696880196909652938716606087015295909116608085015260a084015260c083019390935260e08201929092526101008101919091526101200161043a565b610429610765366004615063565b61283e565b6104a1600d5481565b6104a1662386f26fc1000081565b6104a160065481565b60055461047c906001600160a01b031681565b61052e6107ab3660046151ce565b612939565b6106736107be366004615204565b612b17565b6104a1600c5481565b6107df6107da3660046150cd565b612bc0565b604051901515815260200161043a565b6104a1600f5481565b610429610806366004615230565b612c79565b6104a1610819366004615286565b612d7e565b61047c61082c3660046152b2565b612dbc565b610673612ddb565b61047c7f000000000000000000000000000000000000000000000000000000000000000081565b60095461047c906001600160a01b031681565b6104a1610881366004615286565b612e4d565b6106736108943660046151ce565b612e63565b6106736108a7366004615204565b613014565b6104fa6108ba3660046150cd565b61311a565b6106736108cd3660046151ce565b61316f565b6104a16108e03660046152cd565b6132a7565b6104a16108f336600461530b565b613413565b6104a1670de0b6b3a764000081565b610673610915366004615330565b61346b565b61042961092836600461536b565b6136a2565b6104a161093b366004615286565b613799565b6104a160115481565b6104a1610957366004615286565b6137cf565b6104a161096a3660046153d5565b6137f6565b610a0d61097d3660046152b2565b60036020819052600091825260409091208054600182015460028301549383015460048401546005909401546001600160801b0380851696600160801b95869004600f0b9694959094600685900b94600160381b81046001600160a01b031694600160d81b820463ffffffff1694600160f81b90920460ff1693828416938190048316928083169291909104168c565b604080516001600160801b039d8e168152600f9c909c0b60208d01528b019990995260608a019790975260069590950b60808901526001600160a01b0390931660a088015263ffffffff90911660c0870152151560e0860152851661010085015284166101208401528316610140830152919091166101608201526101800161043a565b61047c7f000000000000000000000000000000000000000000000000000000000000000081565b61047c7f000000000000000000000000000000000000000000000000000000000000000081565b610673610aed36600461540a565b61382d565b610b197f000000000000000000000000000000000000000000000000000000000000000081565b60405160029190910b815260200161043a565b61047c7f000000000000000000000000000000000000000000000000000000000000000081565b610b7a7f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff909116815260200161043a565b600a5461047c906001600160a01b031681565b6104a1610baf3660046151a2565b6138f8565b6104a1610bc2366004615286565b613906565b61052e610bd53660046151ce565b61394e565b6104a1610be83660046152cd565b613a26565b61047c7f000000000000000000000000000000000000000000000000000000000000000081565b610673613b5a565b6104a1610c2a366004615286565b613ba5565b60055460009081906001600160a01b03163314610c675760405162461bcd60e51b8152600401610c5e9061542a565b60405180910390fd5b60005460ff1615610c8a5760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff1916600117905560408051808201909152600f81526e2d2d2d4e65772054726164652d2d2d60881b6020820152610cc690613c6b565b6040805160c0810182526001546001600160a01b03808216835261ffff600160a01b83048116602080860182905260ff600160b01b8604811687890152600160b81b860481161515606080890191909152600160c01b87049091161515608080890191909152600160c81b90960490931660a08701528651610100810188528d81526000918101829052865190941696840196909652908201529192662386f26fc1000092909181018b610d7c57600754610d80565b6006545b8152600060208083018290526002546001600160801b03166040808501829052606094850191909152805193840181528284529083018290528281018290528301519293509091908b1390610dd59085613cb1565b8015610ddf57508b155b15610e2f57600183604001818151610df79190615488565b9052506040830151610e0890611d30565b61ffff16606084018190526001805461ffff60a01b1916600160a01b830217905560208601525b8b610e415782604001518a1115610e4a565b82604001518a10155b610e825760405162461bcd60e51b8152602060048201526009602482015268383634b6b4ba22a92960b91b6044820152606401610c5e565b610e8e61082c8b611d30565b6001600160a01b031699505b825115801590610eae575089836040015114155b1561142f57610f0a60405180610100016040528060008152602001600061ffff1681526020016000151581526020016000815260200160008152602001600081526020016000815260200160006001600160801b031681525090565b604084015181526060840151610f2190868f6137f6565b60608201528c610f415760018460600151610f3c919061549b565b610f51565b6060840151610f519060016154bd565b61ffff1660208201526060840151610f6b90600390613cc5565b6001600160801b031660e082015281610fa857610fa38160e001518560c00151610f9591906154d8565b6001600160801b0316613dd4565b610fcd565b610fcd8160e001518560c00151610fbf91906154d8565b6001600160801b0316613e0b565b83526040840151610fde908e613413565b60408085018290528501518451610ff592906137cf565b60208401908152604085810151606084015187518351631922027560e11b815260048101939093526024830191909152604482015262ffffff7f000000000000000000000000000000000000000000000000000000000000000016606482015285516084820152915160a483015284015160c482015273__$7f722a1af7b4060aab6915c87e2e2208cb$__9063324404ea9060e401608060405180830381865af41580156110a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cb91906154f8565b60c085015260a08401526080830152604080860191909152805180820190915260088152675f5f5f5f5f5f5f5f60c01b602082015261110990613c6b565b61113760405180604001604052806008815260200167435552505249434560c01b8152508560400151613e42565b6111836040518060400160405280601e81526020017f74726164696e673b206c69717569646974792c20616d6f756e746c65667400008152508560c001516001600160801b0316613e42565b835161118e90613e87565b6111da6040518060400160405280601881526020017f6e65787470726963656c696d69742f706f696e746e65787400000000000000008152508260600151836020015161ffff16613ecc565b611201604051806040016040528060018152602001606160f81b8152508460000151613e42565b61123a6040518060400160405280600e81526020016d185b5bdd5b9d1a5b985b991bdd5d60921b81525082608001518360a00151613ecc565b6112686040518060400160405280600381526020016239963160e91b81525084602001518560400151613ecc565b811561128a5760808101518451859061128290839061552e565b9052506112a2565b60808101518451859061129e90839061554e565b9052505b8060a00151846020018181516112b89190615488565b90525060c08401516001600160801b0316156112ff5760c080850151908201516112ea916001600160801b0316613f13565b846080018181516112fb9190615488565b9052505b80606001518460400151036114295760e08101516001600160801b031615611333576060840151611333906003908f613f28565b602081015160065460075460009261134d9260039261401f565b9050866080015115801561137057508660a0015161ffff16826020015161ffff16145b1561139e5760208083015161ffff1660009081526008909152604090205461139b90600f0b82615576565b90505b604080518082018252600a81526964796e616d69634c697160b01b6020808301919091528481015161ffff166000908152600890915291909120546113ec9190600f90810b9084900b613ecc565b8d6113fd576113fa816155ac565b90505b61140b8560c0015182612542565b6001600160801b031660c086015250602081015161ffff1660608501525b50610e9a565b61143c8360400151614072565b600180546001600160a01b0319166001600160a01b03929092169190911790556020850151606084015161ffff9182169116146114995760608301516001805461ffff909216600160a01b0261ffff60a01b199092169190911790555b8260c001516001600160801b03168360e001516001600160801b0316146114df5760c0830151600280546001600160801b0319166001600160801b039092169190911790555b8b156114ee5760808301516006555b8061151f5761271083602001516115059190615488565b83516115108d6155d2565b61151a919061554e565b61154c565b8b61153a578251611530908c61552e565b836020015161154c565b8251611546908c61552e565b83602001515b6040805180820190915260038152623f3f3f60e81b60208201528551929950909750611578918d613ecc565b50506000805460ff19169055509299919850909650505050505050565b60008083156115c65784156115ba576115b0838760006120e8565b90925090506115ea565b6115b0838760016120e8565b84156115d8576115b0838760016120e8565b6115e4838760006120e8565b90925090505b60095460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061161c90869086906004016155ee565b6020604051808303816000875af115801561163b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165f9190615607565b50600a546040516340c10f1960e01b81526001600160a01b03909116906340c10f199061169290869085906004016155ee565b600060405180830381600087803b1580156116ac57600080fd5b505af11580156116c0573d6000803e3d6000fd5b5050505094509492505050565b60055460009081906001600160a01b031633146116fc5760405162461bcd60e51b8152600401610c5e9061542a565b60005460ff161561171f5760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff19166001178155611739600433898961408d565b90508060050154856001600160801b03161161175e57846001600160801b0316611764565b80600501545b92508060060154846001600160801b03161161178957836001600160801b031661178f565b80600601545b915082156117b157828160050160008282546117ab9190615624565b90915550505b81156117d157818160060160008282546117cb9190615624565b90915550505b506000805460ff1916905590969095509350505050565b6005546000906001600160a01b031633146118155760405162461bcd60e51b8152600401610c5e9061542a565b60005460ff16156118385760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff191660019081179091555461ffff851690611861906001600160a01b0316611d30565b61ffff16036118be5760405162461bcd60e51b815260206004820152602360248201527f43616e277420726564756365206f7264657220666f722063757272656e74207460448201526269636b60e81b6064820152608401610c5e565b60006118da33866118d08160016154bd565b600492919061408d565b90506118f26118e8856155ac565b82908560006140f8565b611909856118ff866155ac565b60039190866141cd565b600083611936577f0000000000000000000000000000000000000000000000000000000000000000611958565b7f00000000000000000000000000000000000000000000000000000000000000005b90508361199f5761199a61197061082c8860016154bd565b6001600160a01b031661198288612dbc565b6001600160a01b0316876001600160801b0316613ba5565b6119da565b6119da6119b061082c8860016154bd565b6001600160a01b03166119c288612dbc565b6001600160a01b0316876001600160801b0316612d7e565b6000805460ff19169055979650505050505050565b600c54600d5460405163018b035160e01b8152600481018490526000602482018190526044820193909352606481019190915260016084820152819073__$7f722a1af7b4060aab6915c87e2e2208cb$__9063018b03519060a4016040805180830381865af4158015611a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8a9190615637565b50905082611aa082670de0b6b3a764000061429e565b611aaa9190615624565b9392505050565b60055460009081906001600160a01b03163314611ae05760405162461bcd60e51b8152600401610c5e9061542a565b60005460ff1615611b035760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff19166001179055828015611b3957506001546001600160a01b0316611b2d86612dbc565b6001600160a01b031611155b15611b775760405162461bcd60e51b815260206004820152600e60248201526d61736b2062656c6f77207072696560901b6044820152606401610c5e565b82158015611ba157506001546001600160a01b0316611b9586612dbc565b6001600160a01b031610155b15611be05760405162461bcd60e51b815260206004820152600f60248201526e626964732061626f7665207072696560881b6044820152606401610c5e565b6000611bf287876118d08160016154bd565b9050611c00600387866142b3565b9150611c0e818686856140f8565b611c1b60038787876141cd565b600084611c48577f0000000000000000000000000000000000000000000000000000000000000000611c6a565b7f00000000000000000000000000000000000000000000000000000000000000005b905084611cb157611cac611c8261082c8960016154bd565b6001600160a01b0316611c9489612dbc565b6001600160a01b0316886001600160801b0316613ba5565b611cec565b611cec611cc261082c8960016154bd565b6001600160a01b0316611cd489612dbc565b6001600160a01b0316886001600160801b0316612d7e565b9350611d1960405180604001604052806009815260200168185b5bdd5b9d189a5960ba1b81525085613e42565b50506000805460ff19169055909590945092505050565b6000670de0b6b3a7640000611d4c83662386f26fc10000613f13565b611d569190615671565b92915050565b6000808615611ed557611d7433600188888888610c2f565b90925090507f000000000000000000000000000000000000000000000000000000000000000015611db157611dac338284600161430b565b6120de565b6000611dbb61445d565b604051636d29069f60e11b8152909150339063da520d3e90611de590869089908990600401615685565b600060405180830381600087803b158015611dff57600080fd5b505af1158015611e13573d6000803e3d6000fd5b505050508083611e239190615488565b611e2b61445d565b1015611e625760405162461bcd60e51b81526020600482015260066024820152653130b622a92960d11b6044820152606401610c5e565b600a546001600160a01b03166340c10f19611e7f86880188615185565b846040518363ffffffff1660e01b8152600401611e9d9291906155ee565b600060405180830381600087803b158015611eb757600080fd5b505af1158015611ecb573d6000803e3d6000fd5b50505050506120de565b611ee430600088888888610c2f565b90925090506000611ef361445d565b9050611f1f6040518060400160405280600781526020016618985cd958985b60ca1b8152508284613ecc565b611f2761445d565b821115611f605760405162461bcd60e51b815260206004820152600760248201526621616d6d4c697160c81b6044820152606401610c5e565b8180611f7485670de0b6b3a76400006144cf565b611f7e9190615624565b92507f000000000000000000000000000000000000000000000000000000000000000015611fb857611fb3338585600061430b565b6120db565b6000611fc261445d565b604051636d29069f60e11b8152909150339063da520d3e90611fec9087908b908b90600401615685565b600060405180830381600087803b15801561200657600080fd5b505af115801561201a573d6000803e3d6000fd5b50505050808461202a9190615488565b61203261445d565b10156120695760405162461bcd60e51b81526020600482015260066024820152653130b622a92960d11b6044820152606401610c5e565b600b546001600160a01b03166340c10f19612086888a018a615185565b876040518363ffffffff1660e01b81526004016120a49291906155ee565b600060405180830381600087803b1580156120be57600080fd5b505af11580156120d2573d6000803e3d6000fd5b50505050819450505b50505b9550959350505050565b60055460009081906001600160a01b031633146121175760405162461bcd60e51b8152600401610c5e9061542a565b60005460ff161561213a5760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff1916600190811782556040805160c08101825282546001600160a01b038116825261ffff600160a01b820481166020840152600160b01b820460ff90811694840194909452600160b81b8204841615156060840152600160c01b820490931615156080830152600160c81b900490911660a082015291906121ca90889088906118d09082906154bd565b90508561ffff166121e783600001516001600160a01b0316611d30565b61ffff16146122285760405162461bcd60e51b815260206004820152600d60248201526c4e6f742063757220707269636560981b6044820152606401610c5e565b600085612249576001820154600160801b90046001600160801b0316612258565b60018201546001600160801b03165b9050612270612266826155ac565b83908860006140f8565b6122878761227d836155ac565b60039190896141cd565b6122be61229861082c8960016154bd565b6001600160a01b031684600001516001600160a01b0316836001600160801b0316612d7e565b93506122f283600001516001600160a01b03166122da89612dbc565b6001600160a01b0316836001600160801b0316613ba5565b6000805460ff19169055989397509295505050505050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146123735760405162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b6044820152606401610c5e565b60006123936123828587615488565b61238d8860026156bb565b906144e4565b905060006123a58261238d8888615624565b905073__$7f722a1af7b4060aab6915c87e2e2208cb$$7f722a1af7b4060aab6915c87e2e2208cb$__63018b035161353e878661429e565b600c54600d546040516001600160e01b031960e086901b168152600481019390935260006024840152604483019190915260648201526001608482015260a4016040805180830381865af415801561359a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135be9190615637565b600e55600f5573__$7f722a1af7b4060aab6915c87e2e2208cb$__63018b03516135f26135eb8486615488565b889061429e565b600c54600d546040516001600160e01b031960e086901b168152600481019390935260006024840152604483019190915260648201526001608482015260a4016040805180830381865af415801561364e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136729190615637565b60115550600c54613690906124a690670de0b6b3a7640000906144e4565b61369b600e546144f9565b5050505050565b60055460009081906001600160a01b031633146136d15760405162461bcd60e51b8152600401610c5e9061542a565b60005460ff16156136f45760405162461bcd60e51b8152600401610c5e9061544d565b6000805460ff191660011790556001600160801b0385166137425760405162461bcd60e51b81526020600482015260086024820152670c08185b5bdd5b9d60c21b6044820152606401610c5e565b61377f60405180608001604052808a6001600160a01b031681526020018961ffff1681526020018861ffff16815260200187600f0b815250614655565b6000805460ff19169055909a909950975050505050505050565b6000828410156137bb5760405162461bcd60e51b8152600401610c5e9061571c565b612db46137c88486615624565b8390613f13565b6000816000036137e25750600019611aaa565b612db4826137f08587615624565b90613f13565b6000811561381f578261380a8560016154bd565b61ffff1661381891906156bb565b9050611aaa565b6138188361ffff86166156bb565b6005546001600160a01b031633146138575760405162461bcd60e51b8152600401610c5e906156fa565b80156138c657600a54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061388f90869086906004016155ee565b600060405180830381600087803b1580156138a957600080fd5b505af11580156138bd573d6000803e3d6000fd5b50505050505050565b600b54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061388f90869086906004016155ee565b600061282e600384846142b3565b6000828410156139285760405162461bcd60e51b8152600401610c5e9061571c565b612db46137c8600261393a8688615488565b6139449190615671565b612dae8688615624565b60008083156139da5761396d8387612a41612a2061082c8360016154bd565b600a54604051632770a7eb60e21b81529294509092506001600160a01b031690639dc29fac906139a390869086906004016155ee565b600060405180830381600087803b1580156139bd57600080fd5b505af11580156139d1573d6000803e3d6000fd5b50505050612b0e565b6139f08387612979612a2061082c8360016154bd565b600b54604051632770a7eb60e21b81529294509092506001600160a01b031690639dc29fac9061169290869089906004016155ee565b60008215613aa7576000613a3c83866000612602565b600a546040516340c10f1960e01b81529192506001600160a01b0316906340c10f1990613a6f90869085906004016155ee565b600060405180830381600087803b158015613a8957600080fd5b505af1158015613a9d573d6000803e3d6000fd5b5050505050611aaa565b600b546001600160a01b03166340c10f1983613aff613aca61082c8960016154bd565b6001600160a01b0316613adc89612dbc565b6001600160a01b0316613af1338b600161311a565b6001600160801b0316612d7e565b6040518363ffffffff1660e01b8152600401613b1c9291906155ee565b600060405180830381600087803b158015613b3657600080fd5b505af1158015613b4a573d6000803e3d6000fd5b50505050612db482856001612602565b6005546001600160a01b03163314613b845760405162461bcd60e51b8152600401610c5e9061542a565b6001805460ff60b81b198116600160b81b9182900460ff1615909102179055565b600082841015613bc75760405162461bcd60e51b8152600401610c5e9061571c565b73__$7f722a1af7b4060aab6915c87e2e2208cb$__636ca35e9e613bec868686612d7e565b6000613bf786613e0b565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260648101869052608401602060405180830381865af4158015613c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db49190615753565b613cae81604051602401613c7f91906157b2565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052614918565b50565b6000613cbd828461573f565b159392505050565b61ffff811660009081526020838152604080832081516101808101835281546001600160801b038082168352600160801b91829004600f0b95830195909552600183015493820193909352600282015460608201526003820154600681900b6080830152600160381b81046001600160a01b031660a0830152600160d81b810463ffffffff1660c0830152600160f81b900460ff16151560e08201526004820154808516610100830181905290849004851661012083015260059092015480851661014083015292909204909216610160820152901580613db257506101208101516001600160801b0316155b613dbe57613dbe6157c5565b806101200151816101000151612db491906154d8565b60008115613dee576125aa670de0b6b3a7640000836148ed565b611d56613dfc836001615488565b670de0b6b3a7640000906148ed565b60008115613e25576125aa670de0b6b3a764000083613f13565b611d56613e33836001615488565b670de0b6b3a764000090613f13565b6131168282604051602401613e589291906157db565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052614918565b613cae81604051602401613e9d91815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f5b1bba960e01b179052614918565b6130df838383604051602401613ee4939291906157fd565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b179052614918565b6000611aaa83670de0b6b3a764000084614939565b61ffff821660009081526020849052604090208115613fc4576004810180546001600160801b03191690556005810180546001600160801b0316906000613f6e83615822565b91906101000a8154816001600160801b0302191690836001600160801b0316021790555050613fbf604051806040016040528060068152602001657469636b3f3f60d01b8152508461ffff16613e42565b61300e565b6004810180546001600160801b03908116909155600582018054600160801b9004909116906010613ff483615822565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050505050565b61ffff8316600090815260208590526040902080546001820154600160801b909104600f0b91906140509085615624565b600182015560028101546140649084615624565b600290910155949350505050565b806001600160a01b038116811461408857600080fd5b919050565b6040805160609490941b6bffffffffffffffffffffffff191660208086019190915260f093841b6001600160f01b031990811660348701529290931b909116603684015280516018818503018152603890930181528251928201929092206000908152929052902090565b8115614162576001840154614116906001600160801b031684612542565b6001850180546001600160801b0319166001600160801b03929092169190911790556000600f84900b1315613fbf5783546001600160801b03808316600160801b02911617845561300e565b600184015461418190600160801b90046001600160801b031684612542565b6001850180546001600160801b03928316600160801b0292169190911790556000600f84900b131561300e5783546001600160801b0319166001600160801b0391909116179092555050565b80156142365761ffff83166000908152602085905260409020600401546141fd906001600160801b031683612542565b61ffff8416600090815260208690526040902060040180546001600160801b0319166001600160801b039290921691909117905561300e565b61ffff831660009081526020859052604090206004015461426790600160801b90046001600160801b031683612542565b61ffff8416600090815260208690526040902060040180546001600160801b03928316600160801b02921691909117905550505050565b6000611aaa8383670de0b6b3a7640000614958565b6000816142e65761ffff8316600090815260208590526040902060050154600160801b90046001600160801b0316612db4565b505061ffff16600090815260209190915260409020600501546001600160801b031690565b801561437a57600a546040516340c10f1960e01b81526001600160a01b03909116906340c10f199061434390879087906004016155ee565b600060405180830381600087803b15801561435d57600080fd5b505af1158015614371573d6000803e3d6000fd5b505050506143df565b600b546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906143ac90879087906004016155ee565b600060405180830381600087803b1580156143c657600080fd5b505af11580156143da573d6000803e3d6000fd5b505050505b6009546040516323b872dd60e01b81526001600160a01b03868116600483015230602483015260448201859052909116906323b872dd906064015b6020604051808303816000875af1158015614439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369b9190615607565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156144a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144ca9190615753565b905090565b6000611aaa8383670de0b6b3a7640000614939565b6000611aaa83670de0b6b3a764000084614958565b61450281611d30565b6001805461ffff92909216600160a01b0261ffff60a01b1990921691909117905561452c81614072565b600180546001600160a01b0319166001600160a01b039290921691909117905550565b80156145be57600a54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061458790879086906004016155ee565b600060405180830381600087803b1580156145a157600080fd5b505af11580156145b5573d6000803e3d6000fd5b50505050614623565b600b54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac906145f090879086906004016155ee565b600060405180830381600087803b15801561460a57600080fd5b505af115801561461e573d6000803e3d6000fd5b505050505b60095460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061441a90879087906004016155ee565b6040805160c0810182526001546001600160a01b038116825261ffff600160a01b82048116602080850182905260ff600160b01b8504811686880152600160b81b850481161515606080880191909152600160c01b860490911615156080870152600160c81b90940490921660a085015285519186015194860151928601516000958695869590946146e994909390614976565b93508460600151600f0b6000146148e557846020015161ffff16816020015161ffff16101561477b576147746147228660400151612dbc565b6001600160a01b03166147388760200151612dbc565b6001600160a01b031660008860600151600f0b121561476757876060015161475f906155ac565b600f0b612d7e565b8760600151600f0b612d7e565b91506148e5565b846040015161ffff16816020015161ffff1610156148885760025460408601516001600160801b03909116906147f6906147b490612dbc565b6001600160a01b031683600001516001600160a01b031660008960600151600f0b12156147e957886060015161475f906155ac565b8860600151600f0b612d7e565b925061485282600001516001600160a01b03166148168860200151612dbc565b6001600160a01b031660008960600151600f0b121561484557886060015161483d906155ac565b600f0b613ba5565b8860600151600f0b613ba5565b9350614862818760600151612542565b600280546001600160801b0319166001600160801b0392909216919091179055506148e5565b6148e26148988660400151612dbc565b6001600160a01b03166148ae8760200151612dbc565b6001600160a01b031660008860600151600f0b12156148d557876060015161483d906155ac565b8760600151600f0b613ba5565b92505b509193909250565b6000611aaa83670de0b6b3a764000084614a02565b806001600160801b038116811461408857600080fd5b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b82820281151584158583048514171661495157600080fd5b0492915050565b600082600019048411830215820261496f57600080fd5b5091020490565b6000614985600487878761408d565b60065460075491925090600f85900b156149d2576006546007546149b4916003918a9188918a91906000614a30565b506006546007546149d091600391899188918a91906001614a30565b505b6000806149e460038a8a898888614b3c565b90925090506149f585888484614c28565b5050505095945050505050565b828202811515841585830485141716614a1a57600080fd5b6001826001830304018115150290509392505050565b61ffff8616600090815260208890526040812080546001600160801b031682614a598289612542565b6001600160801b0380821615908416801591909114159550909150600003614ab1578861ffff168a61ffff1611614a995760018301879055600283018690555b6003830180546001600160f81b0316600160f81b1790555b82546001600160801b0319166001600160801b03821617835584614af7578254614af290614aed90600f8b810b91600160801b9004900b61554e565b614e1a565b614b15565b8254614b1590614aed90600f8b810b91600160801b9004900b61552e565b83546001600160801b03918216600160801b02911617909255509098975050505050505050565b61ffff80861660008181526020899052604080822088851683529082209193849391929184918291908a1610614b7d57505060018201546002830154614ba1565b6001840154614b8c9089615624565b9150836002015487614b9e9190615624565b90505b6000808b61ffff168b61ffff161015614bc557505060018301546002840154614be9565b6001850154614bd4908b615624565b9150846002015489614be69190615624565b90505b81614bf4858c615624565b614bfe9190615624565b975080614c0b848b615624565b614c159190615624565b9650505050505050965096945050505050565b604080516101208101825285546001600160801b038082168352600160801b918290048116602084015260018801548082169484019490945292048216606082015260028601549091166080820152600385015460a0820152600485015460c0820152600585015460e082015260068501546101008201526000600f85900b8103614cfa57600082608001516001600160801b031611614cef5760405162461bcd60e51b815260206004820152600260248201526104e560f41b6044820152606401610c5e565b506080810151614d0b565b614d08826080015186612542565b90505b6000614d3e83608001516001600160801b0316670de0b6b3a76400008560a0015188614d379190615624565b9190614939565b90506000614d6c84608001516001600160801b0316670de0b6b3a76400008660c0015188614d379190615624565b905086600f0b600014614d97576002880180546001600160801b0319166001600160801b0385161790555b60038801869055600488018590556001600160801b038216151580614dc557506000816001600160801b0316115b1561329d57816001600160801b0316886005016000828254614de79190615488565b92505081905550806001600160801b0316886006016000828254614e0b9190615488565b90915550505050505050505050565b80600f81900b811461408857600080fd5b6001600160a01b0381168114613cae57600080fd5b8015158114613cae57600080fd5b60008083601f840112614e6057600080fd5b50813567ffffffffffffffff811115614e7857600080fd5b602083019150836020828501011115614e9057600080fd5b9250929050565b60008060008060008060a08789031215614eb057600080fd5b8635614ebb81614e2b565b95506020870135614ecb81614e40565b94506040870135935060608701359250608087013567ffffffffffffffff811115614ef557600080fd5b614f0189828a01614e4e565b979a9699509497509295939492505050565b803561ffff8116811461408857600080fd5b60008060008060808587031215614f3b57600080fd5b614f4485614f13565b93506020850135614f5481614e40565b92506040850135614f6481614e40565b91506060850135614f7481614e2b565b939692955090935050565b80356001600160801b038116811461408857600080fd5b600080600080600060a08688031215614fae57600080fd5b8535614fb981614e2b565b9450614fc760208701614f13565b9350614fd560408701614f13565b9250614fe360608701614f7f565b9150614ff160808701614f7f565b90509295509295909350565b6000806000806080858703121561501357600080fd5b843561501e81614e2b565b935061502c60208601614f13565b925061503a60408601614f7f565b91506060850135614f7481614e40565b60006020828403121561505c57600080fd5b5035919050565b60008060008060006080868803121561507b57600080fd5b853561508681614e40565b94506020860135935060408601359250606086013567ffffffffffffffff8111156150b057600080fd5b6150bc88828901614e4e565b969995985093965092949392505050565b6000806000606084860312156150e257600080fd5b83356150ed81614e2b565b92506150fb60208501614f13565b9150604084013561510b81614e40565b809150509250925092565b6000806000806080858703121561512c57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561515b57600080fd5b61516483614f7f565b9150602083013580600f0b811461517a57600080fd5b809150509250929050565b60006020828403121561519757600080fd5b8135611aaa81614e2b565b600080604083850312156151b557600080fd5b6151be83614f13565b9150602083013561517a81614e40565b600080600080608085870312156151e457600080fd5b6151ed85614f13565b9350602085013592506040850135614f6481614e40565b6000806040838503121561521757600080fd5b823561522281614e2b565b946020939093013593505050565b6000806000806080858703121561524657600080fd5b843561525181614e2b565b935061525f60208601614f13565b925061526d60408601614f13565b915061527b60608601614f7f565b905092959194509250565b60008060006060848603121561529b57600080fd5b505081359360208301359350604090920135919050565b6000602082840312156152c457600080fd5b611aaa82614f13565b6000806000606084860312156152e257600080fd5b6152eb84614f13565b925060208401356152fb81614e40565b9150604084013561510b81614e2b565b6000806040838503121561531e57600080fd5b82359150602083013561517a81614e40565b600080600080600060a0868803121561534857600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060008060008060a0878903121561538457600080fd5b863561538f81614e2b565b955061539d60208801614f13565b94506153ab60408801614f13565b93506153b960608801614f7f565b9250608087013567ffffffffffffffff811115614ef557600080fd5b6000806000606084860312156153ea57600080fd5b6153f384614f13565b925060208401359150604084013561510b81614e40565b60008060006060848603121561541f57600080fd5b83356153f381614e2b565b6020808252600990820152684e6f7420456e74727960b81b604082015260600190565b6020808252600b908201526a4552525f5245454e54525960a81b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115611d5657611d56615472565b61ffff8281168282160390808211156154b6576154b6615472565b5092915050565b61ffff8181168382160190808211156154b6576154b6615472565b6001600160801b038181168382160190808211156154b6576154b6615472565b6000806000806080858703121561550e57600080fd5b505082516020840151604085015160609095015191969095509092509050565b81810360008312801583831316838312821617156154b6576154b6615472565b808201828112600083128015821682158216171561556e5761556e615472565b505092915050565b600f81810b9083900b0160016001607f1b0381136f7fffffffffffffffffffffffffffffff1982121715611d5657611d56615472565b600081600f0b60016001607f1b031981036155c9576155c9615472565b60000392915050565b6000600160ff1b82016155e7576155e7615472565b5060000390565b6001600160a01b03929092168252602082015260400190565b60006020828403121561561957600080fd5b8151611aaa81614e40565b81810381811115611d5657611d56615472565b6000806040838503121561564a57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b6000826156805761568061565b565b500490565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60008160001904831182151516156156d5576156d5615472565b500290565b6001600160801b038281168282160390808211156154b6576154b6615472565b60208082526008908201526732b73a393ca2a92960c11b604082015260600190565b602080825260099082015268383934b1b29022a92960b91b604082015260600190565b60008261574e5761574e61565b565b500690565b60006020828403121561576557600080fd5b5051919050565b6000815180845260005b8181101561579257602081850181015186830182015201615776565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611aaa602083018461576c565b634e487b7160e01b600052600160045260246000fd5b6040815260006157ee604083018561576c565b90508260208301529392505050565b606081526000615810606083018661576c565b60208301949094525060400152919050565b60006001600160801b0380831681810361583e5761583e615472565b600101939250505056fea26469706673582212200099b2ec3f9da879753ba5d8567c4229ea3d44c3d5fead92566f2bdf15b0bd3764736f6c63430008100033a26469706673582212206d1f0b424d4fa0ee4467e134cf9ff376d7df75085a4219068462f3a24144f29764736f6c63430008100033",
  "libraries": {
    "LinearCurve": "0xF37F8dAb80146330880c2Efb2dC05c425478197f"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "newPool(address,address)": {
        "notice": "param base is the collateral used in pool "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}